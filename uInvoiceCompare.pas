unit uInvoiceCompare;

interface

uses
    Winapi.Windows
  , Winapi.Messages
  , System.SysUtils
  , System.Variants
  , System.Classes
  , Vcl.Graphics
  , Vcl.Controls
  , Vcl.Forms
  , Vcl.Dialogs
  , Vcl.ComCtrls
  , Vcl.StdCtrls
  , Vcl.ExtCtrls
  , kbmMemTable
  , hdata
  , cmpRoomerDataSet
  , _glob
  , ug

  , sButton
  , sPageControl
  , sStatusBar
  , sPanel
  , sSplitter

  , cxGraphics
  , cxControls
  , cxLookAndFeels
  , cxLookAndFeelPainters
  , cxStyles
  , dxSkinsCore
  , cxCustomData
  , cxFilter
  , cxData
  , cxDataStorage
  , cxEdit
  , cxNavigator
  , cxDBData
  , cxGridCustomTableView
  , cxGridTableView
  , cxGridDBTableView
  , cxGridLevel
  , cxClasses
  , cxGridCustomView
  , cxGrid, dxSkinBlack, dxSkinBlue, dxSkinBlueprint, dxSkinCaramel, dxSkinCoffee, dxSkinDarkRoom, dxSkinDarkSide,
  dxSkinDevExpressDarkStyle, dxSkinDevExpressStyle, dxSkinFoggy, dxSkinGlassOceans, dxSkinHighContrast, dxSkiniMaginary, dxSkinLilian,
  dxSkinLiquidSky, dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMoneyTwins, dxSkinOffice2007Black, dxSkinOffice2007Blue,
  dxSkinOffice2007Green, dxSkinOffice2007Pink, dxSkinOffice2007Silver, dxSkinOffice2010Black, dxSkinOffice2010Blue, dxSkinOffice2010Silver,
  dxSkinOffice2013White, dxSkinPumpkin, dxSkinSeven, dxSkinSevenClassic, dxSkinSharp, dxSkinSharpPlus, dxSkinSilver, dxSkinSpringTime,
  dxSkinStardust, dxSkinSummer2008, dxSkinTheAsphaltWorld, dxSkinsDefaultPainters, dxSkinValentine, dxSkinVS2010, dxSkinWhiteprint,
  dxSkinXmas2008Blue, dxSkinscxPCPainter, Data.DB, cxCheckBox

  ;



type
  TfrmInvoiceCompare = class(TForm)
    sPanel1: TsPanel;
    sStatusBar1: TsStatusBar;
    sPageControl1: TsPageControl;
    sTabSheet1: TsTabSheet;
    sTabSheet2: TsTabSheet;
    sTabSheet3: TsTabSheet;
    sPanel2: TsPanel;
    sPanel3: TsPanel;
    sPanel4: TsPanel;
    sPanel5: TsPanel;
    sPanel6: TsPanel;
    sSplitter1: TsSplitter;
    sPanel7: TsPanel;
    mInvoicelines_beforeDS: TDataSource;
    mInvoicelines_afterDS: TDataSource;
    tvInvoiceLines_before: TcxGridDBTableView;
    lvInvoiceLines_before: TcxGridLevel;
    gridInvoiceLines_before: TcxGrid;
    gridInvoiceLines_after: TcxGrid;
    tvInvoiceLines_after: TcxGridDBTableView;
    lvInvoiceLines_after: TcxGridLevel;
    tvInvoiceLines_beforeAutoGen: TcxGridDBColumn;
    tvInvoiceLines_beforeReservation: TcxGridDBColumn;
    tvInvoiceLines_beforeRoomReservation: TcxGridDBColumn;
    tvInvoiceLines_beforeSplitNumber: TcxGridDBColumn;
    tvInvoiceLines_beforeItemNumber: TcxGridDBColumn;
    tvInvoiceLines_beforeInvoiceNumber: TcxGridDBColumn;
    tvInvoiceLines_beforeItemID: TcxGridDBColumn;
    tvInvoiceLines_beforeNumber: TcxGridDBColumn;
    tvInvoiceLines_beforeDescription: TcxGridDBColumn;
    tvInvoiceLines_beforePrice: TcxGridDBColumn;
    tvInvoiceLines_beforeVATType: TcxGridDBColumn;
    tvInvoiceLines_beforeTotal: TcxGridDBColumn;
    tvInvoiceLines_beforeTotalWOVAT: TcxGridDBColumn;
    tvInvoiceLines_beforeVat: TcxGridDBColumn;
    tvInvoiceLines_beforeAutoGenerated: TcxGridDBColumn;
    tvInvoiceLines_beforeCurrencyRate: TcxGridDBColumn;
    tvInvoiceLines_beforeCurrency: TcxGridDBColumn;
    tvInvoiceLines_beforeReportDate: TcxGridDBColumn;
    tvInvoiceLines_beforeReportTime: TcxGridDBColumn;
    tvInvoiceLines_beforePersons: TcxGridDBColumn;
    tvInvoiceLines_beforeNights: TcxGridDBColumn;
    tvInvoiceLines_beforeBreakfastPrice: TcxGridDBColumn;
    tvInvoiceLines_beforeAYear: TcxGridDBColumn;
    tvInvoiceLines_beforeAMon: TcxGridDBColumn;
    tvInvoiceLines_beforeADay: TcxGridDBColumn;
    tvInvoiceLines_beforeilTmp: TcxGridDBColumn;
    tvInvoiceLines_beforeilID: TcxGridDBColumn;
    tvInvoiceLines_beforeilAccountKey: TcxGridDBColumn;
    tvInvoiceLines_beforeItemCurrency: TcxGridDBColumn;
    tvInvoiceLines_beforeItemCurrencyRate: TcxGridDBColumn;
    tvInvoiceLines_beforeDiscount: TcxGridDBColumn;
    tvInvoiceLines_beforeDiscount_isPrecent: TcxGridDBColumn;
    tvInvoiceLines_beforeImportRefrence: TcxGridDBColumn;
    tvInvoiceLines_beforeImportSource: TcxGridDBColumn;
    tvInvoiceLines_beforeIsPackage: TcxGridDBColumn;
    tvInvoiceLines_beforeconfirmdate: TcxGridDBColumn;
    tvInvoiceLines_afterAutoGen: TcxGridDBColumn;
    tvInvoiceLines_afterReservation: TcxGridDBColumn;
    tvInvoiceLines_afterRoomReservation: TcxGridDBColumn;
    tvInvoiceLines_afterSplitNumber: TcxGridDBColumn;
    tvInvoiceLines_afterItemNumber: TcxGridDBColumn;
    tvInvoiceLines_afterInvoiceNumber: TcxGridDBColumn;
    tvInvoiceLines_afterItemID: TcxGridDBColumn;
    tvInvoiceLines_afterNumber: TcxGridDBColumn;
    tvInvoiceLines_afterDescription: TcxGridDBColumn;
    tvInvoiceLines_afterPrice: TcxGridDBColumn;
    tvInvoiceLines_afterVATType: TcxGridDBColumn;
    tvInvoiceLines_afterTotal: TcxGridDBColumn;
    tvInvoiceLines_afterTotalWOVAT: TcxGridDBColumn;
    tvInvoiceLines_afterVat: TcxGridDBColumn;
    tvInvoiceLines_afterAutoGenerated: TcxGridDBColumn;
    tvInvoiceLines_afterCurrencyRate: TcxGridDBColumn;
    tvInvoiceLines_afterCurrency: TcxGridDBColumn;
    tvInvoiceLines_afterReportDate: TcxGridDBColumn;
    tvInvoiceLines_afterReportTime: TcxGridDBColumn;
    tvInvoiceLines_afterPersons: TcxGridDBColumn;
    tvInvoiceLines_afterNights: TcxGridDBColumn;
    tvInvoiceLines_afterBreakfastPrice: TcxGridDBColumn;
    tvInvoiceLines_afterAYear: TcxGridDBColumn;
    tvInvoiceLines_afterAMon: TcxGridDBColumn;
    tvInvoiceLines_afterADay: TcxGridDBColumn;
    tvInvoiceLines_afterilTmp: TcxGridDBColumn;
    tvInvoiceLines_afterilID: TcxGridDBColumn;
    tvInvoiceLines_afterilAccountKey: TcxGridDBColumn;
    tvInvoiceLines_afterItemCurrency: TcxGridDBColumn;
    tvInvoiceLines_afterItemCurrencyRate: TcxGridDBColumn;
    tvInvoiceLines_afterDiscount: TcxGridDBColumn;
    tvInvoiceLines_afterDiscount_isPrecent: TcxGridDBColumn;
    tvInvoiceLines_afterImportRefrence: TcxGridDBColumn;
    tvInvoiceLines_afterImportSource: TcxGridDBColumn;
    tvInvoiceLines_afterIsPackage: TcxGridDBColumn;
    tvInvoiceLines_afterconfirmdate: TcxGridDBColumn;
    tvInvoiceLines_beforePurchaseDate: TcxGridDBColumn;
    sButton1: TsButton;
    tvInvoiceLines_afterPurchaseDate: TcxGridDBColumn;
    tvInvoiceLines_afterconfirmAmount: TcxGridDBColumn;
    tvInvoiceLines_afterRoomReservationAlias: TcxGridDBColumn;
    tvInvoiceLines_beforeconfirmAmount: TcxGridDBColumn;
    tvInvoiceLines_beforeRoomReservationAlias: TcxGridDBColumn;
    sPanel8: TsPanel;
    sTabSheet4: TsTabSheet;
    sPanel9: TsPanel;
    mInvoicelogDS: TDataSource;
    grInvoiceLog: TcxGrid;
    tvInvoiceLog: TcxGridDBTableView;
    lvInvoiceLog: TcxGridLevel;
    tvInvoiceLoguser: TcxGridDBColumn;
    tvInvoiceLogreservation: TcxGridDBColumn;
    tvInvoiceLogroomreservation: TcxGridDBColumn;
    tvInvoiceLoginvoiceIndex: TcxGridDBColumn;
    tvInvoiceLogaction: TcxGridDBColumn;
    tvInvoiceLogcode: TcxGridDBColumn;
    tvInvoiceLogvalue: TcxGridDBColumn;
    tvInvoiceLoglineId: TcxGridDBColumn;
    tvInvoiceLogmoreInfo: TcxGridDBColumn;
    tvInvoiceLines_afterisSystemLine: TcxGridDBColumn;
    tvInvoiceLines_beforeisSystemLine: TcxGridDBColumn;
    procedure FormCreate(Sender: TObject);
    procedure sButton1Click(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
  private
    { Private declarations }
     zlistActivity : Tstringlist;

     procedure memInvoiceActivityLog(user : String;
                                     iReservation,
                                     iRoomReservation,
                                     invoiceIndex : Integer;
                                     action : string;
                                     code : String;
                                     value : Double;
                                     lineId : Integer;
                                     moreInfo : String);

  public
    { Public declarations }
  end;

function openInvoiceCompare : boolean;

var
  frmInvoiceCompare: TfrmInvoiceCompare;

implementation

{$R *.dfm}

uses
   uD
,  uActivityLogs
, uRoomerLanguage
, uAppGlobal
, uUtils
;




function openInvoiceCompare : boolean;
begin
  result := false;
  frmInvoiceCompare := TfrmInvoiceCompare.Create(frmInvoiceCompare);
  try
    frmInvoiceCompare.ShowModal;
    if frmInvoiceCompare.modalresult = mrOk then
    begin
      result := true;
    end
    else
    begin
    end;
  finally
    freeandnil(frmInvoiceCompare);
  end;
end;



procedure TfrmInvoiceCompare.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  freeandnil(zlistActivity)
end;

procedure TfrmInvoiceCompare.FormCreate(Sender: TObject);
begin
  RoomerLanguage.TranslateThisForm(self);
  glb.PerformAuthenticationAssertion(self);
  PlaceFormOnVisibleMonitor(self);
  //**
  zlistActivity := Tstringlist.Create;
end;

procedure TfrmInvoiceCompare.memInvoiceActivityLog(user : String;
                                iReservation,
                                iRoomReservation,
                                invoiceIndex : Integer;
                                action : string;
                                code : String;
                                value : Double;
                                lineId : Integer;
                                moreInfo : String);
begin
  d.minvoicelog.insert;
  d.minvoicelog['user'] := user;
  d.minvoicelog['Reservation'] := iReservation;
  d.minvoicelog['RoomReservation'] := iRoomReservation;
  d.minvoicelog['invoiceIndex'] := invoiceIndex;
  d.minvoicelog['action'] := action;
  d.minvoicelog['code'] := code;
  d.minvoicelog['value'] := value;
  d.minvoicelog['lineId'] := lineId;
  d.minvoicelog['moreInfo'] := moreInfo;
  d.minvoicelog.post;
end;


procedure TfrmInvoiceCompare.sButton1Click(Sender: TObject);
var
  s : string;
  iReservation , iroomreservation : integer;
  iSplitnumber : integer;
  Item : string;
  Total : double;
  lineNumber : integer;
  Autogen : string;
  bSystemline : boolean;
  i: Integer;

//  TInvoiceAction = (ADD_LINE, DELETE_LINE, CHANGE_ITEM, ADD_PAYMENT, DELETE_PAYMENT, CHANGE_PAYMENT, PRINT_PROFORMA, PAY_AND_PRINT);


begin
  d.mInvoicelines_before.First;
  while not d.mInvoicelines_before.eof do
  begin
    AutoGen          := d.mInvoicelines_before.FieldByName('Autogen').asString;
    bSystemLine      := d.mInvoicelines_before.FieldByName('isSystemline').asBoolean;

    iReservation     := d.mInvoicelines_before.FieldByName('reservation').asInteger;
    iRoomreservation := d.mInvoicelines_before.FieldByName('roomreservation').asInteger;
    iSplitnumber     := d.mInvoicelines_before.FieldByName('Splitnumber').asInteger;
    item             := d.mInvoicelines_before.FieldByName('itemID').asString;
    Total            := d.mInvoicelines_before.FieldByName('Total').asFloat;
    lineNumber       := d.mInvoicelines_before.FieldByName('itemNumber').asInteger;

    if bsystemline=false then
    begin
       if d.mInvoicelines_after.Locate('AutoGen',autogen,[]) then
       begin
         // not room item
         if d.mInvoicelines_before.FieldByName('Total').AsFloat <> d.mInvoicelines_after.FieldByName('Total').AsFloat  then
         begin

             memInvoiceActivityLog(g.quser
                                   ,iReservation
                                   ,iRoomReservation
                                   ,iSplitNumber
                                   ,'CHANGE_ITEM'
                                   ,item
                                   ,Total
                                   ,LineNumber
                                  ,'TotalPrice change');

             CreateInvoiceActivityLog(g.quser
                                   ,iReservation
                                   ,iRoomReservation
                                   ,iSplitNumber
                                   ,CHANGE_ITEM
                                   ,item
                                   ,Total
                                   ,LineNumber
                                  ,'TotalPrice change');


         if s <> '' then
            zListActivity.Add(s);
         s := '';

         end;

       end else
       begin
             addInvoiceActivityLog(g.quser
                                   ,iReservation
                                   ,iRoomReservation
                                   ,iSplitNumber
                                   ,DELETE_LINE
                                   ,item
                                   ,Total
                                   ,LineNumber
                                  ,'Line deleted');

             CreateInvoiceActivityLog(g.quser
                                   ,iReservation
                                   ,iRoomReservation
                                   ,iSplitNumber
                                   ,DELETE_LINE
                                   ,item
                                   ,Total
                                   ,LineNumber
                                  ,'Line deleted');
         if s <> '' then
            zListActivity.Add(s);
         s := '';
       end;
    end else
    begin
      if d.mInvoicelines_after.Locate('Reservation;roomreservation',varArrayOf([ireservation,iroomreservation]),[]) then
      begin
        if d.mInvoicelines_before.FieldByName('Total').AsFloat <> d.mInvoicelines_after.FieldByName('Total').AsFloat  then
        begin
          memInvoiceActivityLog(g.quser
                                   ,iReservation
                                   ,iRoomReservation
                                   ,iSplitNumber
                                   ,'CHANGE_ITEM'
                                   ,item
                                   ,Total
                                   ,LineNumber
                                  ,'System TotalPrice change');

          CreateInvoiceActivityLog(g.quser
                                   ,iReservation
                                   ,iRoomReservation
                                   ,iSplitNumber
                                   ,CHANGE_ITEM
                                   ,item
                                   ,Total
                                   ,LineNumber
                                  ,'System TotalPrice change');
           if s <> '' then
              zListActivity.Add(s);
           s := '';
        end;
      end else
      begin
        memInvoiceActivityLog(g.quser
                             ,iReservation
                             ,iRoomReservation
                             ,iSplitNumber
                             ,'DELETE_LINE'
                             ,item
                             ,Total
                             ,LineNumber
                            ,'System Line deleted');

        CreateInvoiceActivityLog(g.quser
                             ,iReservation
                             ,iRoomReservation
                             ,iSplitNumber
                             ,DELETE_LINE
                             ,item
                             ,Total
                             ,LineNumber
                            ,'System Line deleted');
         if s <> '' then
            zListActivity.Add(s);
         s := '';
      end;
    end;

    d.mInvoicelines_before.Next;
  end;



  d.mInvoicelines_after.First;
  while not d.mInvoicelines_after.eof do
  begin
    AutoGen          := d.mInvoicelines_after.FieldByName('Autogen').asString;
    bSystemLine      := d.mInvoicelines_after.FieldByName('isSystemline').asBoolean;

    iReservation     := d.mInvoicelines_after.FieldByName('reservation').asInteger;
    iRoomreservation := d.mInvoicelines_after.FieldByName('roomreservation').asInteger;
    iSplitnumber     := d.mInvoicelines_after.FieldByName('Splitnumber').asInteger;
    item             := d.mInvoicelines_after.FieldByName('itemID').asString;
    Total            := d.mInvoicelines_after.FieldByName('Total').asFloat;
    lineNumber       := d.mInvoicelines_after.FieldByName('itemNumber').asInteger;


    if bsystemline=false then
    begin
       if not d.mInvoicelines_before.Locate('AutoGen',autogen,[]) then
       begin
         // not room item
         memInvoiceActivityLog(g.quser
                              ,iReservation
                             ,iRoomReservation
                             ,iSplitNumber
                             ,'ADD_LINE'
                             ,item
                             ,Total
                             ,LineNumber
                            ,'Item added ');

         s :=  CreateInvoiceActivityLog(g.quser
                                 ,iReservation
                                 ,iRoomReservation
                                 ,iSplitNumber
                                 ,ADD_LINE
                                ,item
                                ,Total
                                ,LineNumber
                                ,'Item added ');
         if s <> '' then
            zListActivity.Add(s);
         s := '';

       end;
    end else
    begin
      // RoomItem/Taxitem/roomDiscount
    end;
    d.mInvoicelines_after.Next;
  end;

  for i := 0 to zListActivity.Count-1 do
  begin
    if zListActivity[i] <> '' then
      WriteInvoiceActivityLog(zListActivity[i]);
  end;
end;

end.
