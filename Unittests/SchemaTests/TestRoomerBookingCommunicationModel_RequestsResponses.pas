unit TestRoomerBookingCommunicationModel_RequestsResponses;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, RoomerFinancialDataModel_ModelObjects, XMLIntf,
  RoomerBookingCommunicationModel_RequestsResponses, uRoomerSchema, Classes,
  SysUtils, OXmlPDOM, Spring.Collections.Lists, Spring.Collections;

type
  // Test methods for class TxsdInvoiceResponse

  TestTxsdInvoiceResponse = class(TTestCase)
  strict private
    FSUT: TxsdInvoiceResponse;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSetuptearDown;
    procedure TestLoadInvoiceResponseXML;
  end;

implementation

uses
  Math
  , uRoomerCanonicalDataModel_SimpleTypes;

procedure TestTxsdInvoiceResponse.SetUp;
begin
  FSUT := TxsdInvoiceResponse.Create;
end;

procedure TestTxsdInvoiceResponse.TearDown;
begin
  FSUT.Free;
end;

procedure TestTxsdInvoiceResponse.TestLoadInvoiceResponseXML;
const
  cResponseFile = '..\..\XMLData\InvoiceResponse.xml';
var
  xmlDoc: IXMLDocument;
const
  cInvoiceResponseFile = '..\..\XMLData\InvoiceResponse.xml';
begin
  xmlDoc := TXMLDocument.Create;
  xmlDoc.LoadFromFile(cInvoiceResponseFile);

  CheckFalse(Assigned(xmlDoc.ParseError), 'Errors during parsing of XML file');

  FSUT.SetPropertiesFromXMLNode(xmlDoc.DocumentElement.FirstChild);

  CheckEquals(1, FSUT.Count);
  CheckEquals('2060', FSUT.Items[0].Reservation);
  CheckEquals(1 , FSUT.Items[0].LineItemList.Count);
  CheckEquals(TxsdExtendedBillableEntryType.Classname , FSUT.Items[0].LineItemList[0].Item.Classname);
  CheckTrue(SameValue(188.6792453 , TxsdExtendedBillableEntryType(FSUT.Items[0].LineItemList[0].Item).TotalPaymentPriceGross.Amount));

  CheckEquals('GUEST-NL' , FSUT.Items[0].CustomerData.Customer);
  CheckEquals('Bjorn Heidarr Gudmundsson' , FSUT.Items[0].GuestData.Name);
  CheckEquals('EUR' , FSUT.Items[0].CurrencyData.InvoiceCurrency.asString);
  CheckEquals('EUR' , FSUT.Items[0].CurrencyData.ConversionFromHotelCurrency.From.AsString);
  CheckEquals('EUR' , FSUT.Items[0].CurrencyData.ConversionFromHotelCurrency.To_.AsString);
  CheckTrue(SameValue(160 , FSUT.Items[0].CurrencyData.ConversionFromHotelCurrency.Factor));



end;

procedure TestTxsdInvoiceResponse.TestSetuptearDown;
begin
  Check(True);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTxsdInvoiceResponse.Suite);
end.

