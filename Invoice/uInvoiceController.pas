unit uInvoiceController;

interface

uses   Classes
     , SysUtils
     , System.Generics.Collections
     , cmpRoomerDataSet
     ;

type

  TInvoiceType = (IT_ROOM,IT_CASH,IT_CREDIT);
  TInvoiceAccountType = (IAT_ROOM, IAT_GROUP);
  TInvoiceLineType = (ILT_MANUAL, ILT_SYSTEM);

  TPaymentLineType = (PLT_INVOICE_PAYMENT, PLT_DOWN_PAYMENT);

  TInvoice = class;

  TRoomRentPerDay = class
    FReservation : Integer;
    FRoomReservation : Integer;
    FInvoiceNumber : Integer;
    FRoom : String;
    FPriceCode : String;
    FADate : String;
    FRoomRate : Double;
    FDiscount : Double;
    FIsPercentage : Boolean;
    FShowDiscount : Boolean;
    FPaid : Boolean;
  public
    constructor Create(RecSet : TRoomerDataSet);

    property Reservation : Integer read FReservation write FReservation;
    property RoomReservation : Integer read FRoomReservation write FRoomReservation;
    property InvoiceNumber : Integer read FInvoiceNumber write FInvoiceNumber;
    property Room : String read FRoom write FRoom;
    property PriceCode : String read FPriceCode write FPriceCode;
    property ADate : String read FADate write FADate;
    property RoomRate : Double read FRoomRate write FRoomRate;
    property Discount : Double read FDiscount write FDiscount;
    property IsPercentage : Boolean read FIsPercentage write FIsPercentage;
    property ShowDiscount : Boolean read FShowDiscount write FShowDiscount;
    property Paid : Boolean read FPaid write FPaid;
  end;

  TRoomRentPerdayDictionary = TObjectDictionary<String, TRoomRentPerDay>;

  TInvoicePayment = class
    FReservation : Integer;
    FRoomReservation : Integer;
    FInvoiceNumber : Integer;

    FPerson : Integer;
    FAutoGen : String;
    FTypeIndex : TPaymentLineType;
    FPayDate : TDateTime;
    FPayType : String;
    FAmount : Double;
    FDescription : String;
    FCurrencyRate : Double;
    FCurrency : String;
    FAyear : Integer;
    FAmon : Integer;
    FAday : Integer;
    FID : Integer;
    FconfirmDate : TDateTime;
    FNotes : String;
    Fstaff : String;
    FdtCreated : TDateTime;
    FInvoiceIndex : Integer;
  private
    Owner : TInvoice;
    FDirty : Boolean;
    procedure SetCurrencyRate(const Value: Double);
    procedure SetDirty(const Value: Boolean);
    procedure SetInvoiceIndex(const Value: Integer);
    procedure SetNotes(const Value: String);
    procedure Insert;
    procedure Update;
  public
    constructor Create(Owner : TInvoice); overload;
    constructor Create(Owner : TInvoice; PayType : String; Amount: Double; Description : String; Currency : String; PaymentLineType : TPaymentLineType); overload;
    constructor Create(Owner : TInvoice; DataSet : TRoomerDataSet); overload;

    procedure Save;

    property Reservation : Integer read FReservation write FReservation;
    property RoomReservation : Integer read FRoomReservation write FRoomReservation;
    property InvoiceNumber : Integer read FInvoiceNumber write FInvoiceNumber;
    property Person : Integer read FPerson write FPerson;
    property AutoGen : String read FAutoGen write FAutoGen;
    property TypeIndex : TPaymentLineType read FTypeIndex write FTypeIndex;
    property PayDate : TDateTime read FPayDate write FPayDate;
    property PayType : String read FPayType write FPayType;
    property Amount : Double read FAmount write FAmount;
    property Description : String read FDescription write FDescription;
    property CurrencyRate : Double read FCurrencyRate write SetCurrencyRate;
    property Currency : String read FCurrency write FCurrency;
    property Ayear : Integer read FAyear write FAyear;
    property Amon : Integer read FAmon write FAmon;
    property Aday : Integer read FAday write FAday;
    property ID : Integer read FID write FID;
    property confirmDate : TDateTime read FconfirmDate write FconfirmDate;
    property Notes : String read FNotes write SetNotes;
    property staff : String read Fstaff write Fstaff;
    property dtCreated : TDateTime read FdtCreated write FdtCreated;
    property InvoiceIndex : Integer read FInvoiceIndex write SetInvoiceIndex;


    property IsDirty : Boolean read FDirty write SetDirty;
  end;

  TInvoicePaymentList = TObjectList<TInvoicePayment>;

  TInvoiceLine = class
    FAutoGen : String;
    FReservation : Integer;
    FRoomReservation : Integer;
    FSplitNumber : Integer;
    FItemNumber : Integer;
    FPurchaseDate : TDate;
    FInvoiceNumber : Integer;
    FItemID : String;
    FNumber : Double;
    FDescription : String;
    FPrice : Double;
    FVATType : String;
    FAutoGenerated : Boolean;
    FCurrencyRate : Double;
    FCurrency : String;
    FReportDate : TDate;
    FReportTime : TTime;
    FPersons : Integer; // Used?
    FNights : Integer; // USed?
    FBreakfastPrice : Double;
    FAyear : Integer;
    FAmon : Integer;
    FAday : Integer;
    FilTmp : String;
    FID : Integer;
    FilAccountKey : String;
    FItemCurrency : String; // Used?
    FItemCurrencyRate : Double; // Used?
    FDiscount : Double;
    FDiscount_isprecent : Boolean;
    FImportRefrence : String;
    FImportSource : String;
    FisPackage : Boolean;
    FitemAdded : TDateTime;
    FconfirmDate : TDateTime;
    FconfirmAmount : Double;
    FRoomReservationAlias : Integer;
    FItemSource : String;
    FInvoiceIndex : Integer;
  private
    FOwner : TInvoice;

    FVatPercentage : Double;
    FInvoiceLineType : TInvoiceLineType;

    FDirty : Boolean;
    FArrival: TDate;
    FDeparture: TDate;
    FRoom: String;
    FNumChildren: Integer;
    FRoomTypeDescription: String;
    FPackage: String;
    FIsPercentage: Boolean;
    FStatus: String;
    FRoomDiscount: Double;
    FRateCount: Integer;
    FRoomDescription: String;
    FNumInfants: Integer;
    FAverageRate: Double;
    FGroupAccount: Boolean;
    FRoomType: String;
    FRatePlanCode: String;
    FRoomGuests: Integer;
    FRoomNights: Integer;
    FGuestName: String;

    function GetCityTax: Double;
    function GetTotal: Double;
    function GetTotalWOVat: Double;
    function GetVat: Double;
    procedure SetInvoiceIndex(const Value: Integer);
    procedure Insert;
    procedure Update;
    procedure SetDirty(const Value: Boolean);
    procedure SetInvoiceNumber(const Value: Integer);
    procedure SetItemID(const Value: String);
    procedure SetNumber(const Value: Double);
    procedure SetDescription(const Value: String);
    procedure SetPrice(const Value: Double);
    procedure SetCurrencyRate(const Value: Double);
    procedure SetDiscount(const Value: Double);
    procedure SetDiscount_isprecent(const Value: Boolean);
    function GetCalculatedNumberOfItems(ItemId: String; dDefault: Double): Double;
  public
    constructor Create(Owner : TInvoice); overload;
    constructor Create(Owner : TInvoice; Item : String; NumItems : Double; InvoiceLineType : TInvoiceLineType); overload;
    constructor Create(Owner : TInvoice; DataSet : TRoomerDataSet); overload;

    procedure Save;

    property AutoGen : String read FAutoGen write FAutoGen;
    property Reservation : Integer read FReservation write FReservation;
    property RoomReservation : Integer read FRoomReservation write FRoomReservation;
    property SplitNumber : Integer read FSplitNumber write FSplitNumber;
    property ItemNumber : Integer read FItemNumber write FItemNumber;
    property PurchaseDate : TDate read FPurchaseDate write FPurchaseDate;
    property InvoiceNumber : Integer read FInvoiceNumber write SetInvoiceNumber;
    property ItemID : String read FItemID write SetItemID;
    property Number : Double read FNumber write SetNumber;
    property Description : String read FDescription write SetDescription;
    property Price : Double read FPrice write SetPrice;
    property VATType : String read FVATType write FVATType;
    property AutoGenerated : Boolean read FAutoGenerated write FAutoGenerated;
    property CurrencyRate : Double read FCurrencyRate write SetCurrencyRate;
    property Currency : String read FCurrency write FCurrency;
    property ReportDate : TDate read FReportDate write FReportDate;
    property ReportTime : TTime read FReportTime write FReportTime;
    property Persons : Integer read FPersons write FPersons;
    property Nights : Integer read FNights write FNights;
    property BreakfastPrice : Double read FBreakfastPrice write FBreakfastPrice;
    property Ayear : Integer read FAyear write FAyear;
    property Amon : Integer read FAmon write FAmon;
    property Aday : Integer read FAday write FAday;
    property ilTmp : String read FilTmp write FilTmp;
    property ID : Integer read FID write FID;
    property ilAccountKey : String read FilAccountKey write FilAccountKey;
    property ItemCurrency : String read FItemCurrency write FItemCurrency;
    property ItemCurrencyRate : Double read FItemCurrencyRate write FItemCurrencyRate;
    property Discount : Double read FDiscount write SetDiscount;
    property Discount_isprecent : Boolean read FDiscount_isprecent write SetDiscount_isprecent;
    property ImportRefrence : String read FImportRefrence write FImportRefrence;
    property ImportSource : String read FImportSource write FImportSource;
    property isPackage : Boolean read FisPackage write FisPackage;
    property itemAdded : TDateTime read FitemAdded write FitemAdded;
    property confirmDate : TDateTime read FconfirmDate write FconfirmDate;
    property confirmAmount : Double read FconfirmAmount write FconfirmAmount;
    property RoomReservationAlias : Integer read FRoomReservationAlias write FRoomReservationAlias;
    property ItemSource : String read FItemSource write FItemSource;
    property InvoiceIndex : Integer read FInvoiceIndex write SetInvoiceIndex;

    property Arrival : TDate read FArrival write FArrival;
    property Departure : TDate read FDeparture write FDeparture;
    property RoomGuests : Integer read FRoomGuests write FRoomGuests;
    property RoomNights : Integer read FRoomNights write FRoomNights;
    property GroupAccount : Boolean read FGroupAccount write FGroupAccount;
    property Status : String read FStatus write FStatus;
    property Room : String read FRoom write FRoom;
    property RoomType : String read FRoomType write FRoomType;
    property Package : String read FPackage write FPackage;
    property NumChildren : Integer read FNumChildren write FNumChildren;
    property NumInfants : Integer read FNumInfants write FNumInfants;
    property RatePlanCode : String read FRatePlanCode write FRatePlanCode;
    property AverageRate : Double read FAverageRate write FAverageRate;
    property RateCount : Integer read FRateCount write FRateCount;
    property IsPercentage : Boolean read FIsPercentage write FIsPercentage;
    property RoomDescription : String read FRoomDescription write FRoomDescription;
    property RoomTypeDescription : String read FRoomTypeDescription write FRoomTypeDescription;
    property RoomDiscount : Double read FRoomDiscount write FRoomDiscount;
    property GuestName : String read FGuestName write FGuestName;


    property Total : Double read GetTotal;
    property TotalWOVat : Double read GetTotalWOVat;
    property Vat : Double read GetVat;
    property CityTax : Double read GetCityTax;

    // --
    property Owner : TInvoice read FOwner;
    property IsDirty : Boolean read FDirty write SetDirty;
  end;

  TInvoiceLineList = TObjectlist<TInvoiceLine>;

  TInvoice = class
    FReservation : Integer;
    FRoomReservation : Integer;
    FSplitNumber : Integer;
    FInvoiceNumber : Integer;
    FInvoiceDate : TDate;
    FCustomer : String;
    FName : String;
    FAddress1 : String;
    FAddress2 : String;
    FAddress3 : String;
    FAddress4 : String;
    FCountry : String;
    FTotalBreakFast : Double; // Used?
    FExtraText : String;
    FFinished : Boolean;
    FReportDate : TDate;
    FReportTime : TTime;
    FCreditInvoice : Integer;
    FOriginalInvoice : Integer;
    FInvoiceType : Integer;
    FihTmp : String;
    FID : Integer;
    FcustPID : String;
    FRoomGuest : String;
    FihDate : TDate;
    FihStaff : String;
    FihPayDate : TDateTime;
    FihConfirmDate : TDateTime;
    FihInvoiceDate : TDateTime;
    FihCurrency : String;
    FihCurrencyRate : Double;
    FinvRefrence : String;
    FshowPackage : Boolean;
    Fstaff : String;
    Flocation : String;
    FexternalInvoiceId : Integer;
  private
    InvoiceLines : TInvoiceLineList;
    Payments : TInvoicePaymentList;
    RoomRentsPerDay : TRoomRentPerdayDictionary;

    FInvoiceIndex : Integer;

    FDirty : Boolean;
    FOnSessionExpired: TNotifyEvent;

    FLinesNumDays,
    FLinesNumGuests,
    FNumberGuestNights : Integer;

    FInvoiceIndexes : String;
    FRRInvoiceIndex : Integer;
    FGuestName: String;
    FContactEmail: String;

    function GetTotal: Double;
    function GetTotalStayTax: Double;
    function GetTotalVAT: Double;
    function GetTotalWOVAT: Double;

    function GetNewItemNumber : Integer;
    function GetCount: Integer;
    function GetInvoiceLine(index: Integer): TInvoiceLine;
    procedure SetInvoiceIndex(const Value: Integer);
    procedure LoadInvoice;
    procedure ReadHeader(RecSet: TRoomerDataSet);
    procedure ReadLines(RecSet: TRoomerDataSet);
    procedure ReadPayments(RecSet: TRoomerDataSet);
    procedure ReadTotalGuestNights(RecSet: TRoomerDataSet);
    procedure SetInvoiceNumber(const Value: Integer);
    procedure SetDirty(const Value: Boolean);
    procedure insert;
    procedure update;
    function SqlForAddressee: String;
    procedure SetCustomer(const Value: String);
    procedure SetName(const Value: String);
    procedure SetAddress1(const Value: String);
    procedure SetAddress2(const Value: String);
    procedure SetAddress3(const Value: String);
    procedure SetAddress4(const Value: String);
    procedure SetCountry(const Value: String);
    procedure SetExtraText(const Value: String);
    procedure SetOriginalInvoice(const Value: Integer);
    procedure SetInvoiceType(const Value: Integer);
    procedure SetRoomGuest(const Value: String);
    function GetInvoicePayment(index: Integer): TInvoicePayment;
    function GetPaymentCount: Integer;
    function GetBalance: Double;
    function GetTotalPayments: Double;
    procedure ReadRoomRent(RecSet: TRoomerDataSet);
    procedure SetGuestName(const Value: String);
    procedure SetContactEmail(const Value: String);
    procedure ReadRoomRentPerDay(RecSet: TRoomerDataSet);
  public
    constructor Create(Reservation, RoomReservation, SplitNumber, InvoiceNumber, InvoiceIndex : Integer);
    destructor Destroy; override;

    procedure Save;

    function AddItem(LineType : TInvoiceLineType; Item : String; NumItems : Double; InvoiceLineType : TInvoiceLineType) : TInvoiceLine;
    procedure DeleteLine(Line : TInvoiceLine);
    procedure DeletePayment(Payment : TInvoicePayment);
    function LineIndex(Line : TInvoiceLine) : Integer;
    function PaymentIndex(Payment : TInvoicePayment) : Integer;

    function GetRoomRentPerDay(ADate : TDate; RoomReservation : Integer) : TRoomRentPerDay;

    procedure MoveLine(Line : TInvoiceLine; NewReservation, NewRoomReservation, NewInvoiceIndex : Integer);
    procedure MovePayment(Payment : TInvoicePayment; NewReservation, NewRoomReservation, NewInvoiceIndex : Integer);

    property Count : Integer read GetCount;
    property Line[index : Integer] : TInvoiceLine read GetInvoiceLine;

    property PaymentCount : Integer read GetPaymentCount;
    property Payment[index : Integer] : TInvoicePayment read GetInvoicePayment;

    property IsDirty : Boolean read FDirty write SetDirty;

    property Total : Double read GetTotal;
    property TotalWOVAT : Double read GetTotalWOVAT;
    property TotalVAT : Double read GetTotalVAT;
    property TotalPayments : Double read GetTotalPayments;
    property Balance : Double read GetBalance;

    property TotalStayTax : Double read GetTotalStayTax;

    //
    property Reservation : Integer read FReservation write FReservation;
    property RoomReservation : Integer read FRoomReservation write FRoomReservation;
    property SplitNumber : Integer read FSplitNumber write FSplitNumber;
    property InvoiceNumber : Integer read FInvoiceNumber write SetInvoiceNumber;
    property InvoiceDate : TDate read FInvoiceDate write FInvoiceDate;
    property Customer : String read FCustomer write SetCustomer;
    property Name : String read FName write SetName;
    property GuestName : String read FGuestName write SetGuestName;
    property ContactEmail : String read FContactEmail write SetContactEmail;
    property Address1 : String read FAddress1 write SetAddress1;
    property Address2 : String read FAddress2 write SetAddress2;
    property Address3 : String read FAddress3 write SetAddress3;
    property Address4 : String read FAddress4 write SetAddress4;
    property Country : String read FCountry write SetCountry;
    property TotalBreakFast : Double read FTotalBreakFast write FTotalBreakFast;
    property ExtraText : String read FExtraText write SetExtraText;
    property Finished : Boolean read FFinished write FFinished;
    property ReportDate : TDate read FReportDate write FReportDate;
    property ReportTime : TTime read FReportTime write FReportTime;
    property CreditInvoice : Integer read FCreditInvoice write FCreditInvoice;
    property OriginalInvoice : Integer read FOriginalInvoice write SetOriginalInvoice;
    property InvoiceType : Integer read FInvoiceType write SetInvoiceType;
    property ihTmp : String read FihTmp write FihTmp;
    property ID : Integer read FID write FID;
    property custPID : String read FcustPID write FcustPID;
    property RoomGuest : String read FRoomGuest write SetRoomGuest;
    property ihDate : TDate read FihDate write FihDate;
    property ihStaff : String read FihStaff write FihStaff;
    property ihPayDate : TDateTime read FihPayDate write FihPayDate;
    property ihConfirmDate : TDateTime read FihConfirmDate write FihConfirmDate;
    property ihInvoiceDate : TDateTime read FihInvoiceDate write FihInvoiceDate;
    property ihCurrency : String read FihCurrency write FihCurrency;
    property ihCurrencyRate : Double read FihCurrencyRate write FihCurrencyRate;
    property invRefrence : String read FinvRefrence write FinvRefrence;
    property showPackage : Boolean read FshowPackage write FshowPackage;
    property staff : String read Fstaff write Fstaff;
    property location : String read Flocation write Flocation;
    property externalInvoiceId : Integer read FexternalInvoiceId write FexternalInvoiceId;

    property InvoiceIndex : Integer read FInvoiceIndex write SetInvoiceIndex;
    property RRInvoiceIndex : Integer read FRRInvoiceIndex;

    property OnDirtyFlagActive: TNotifyEvent read FOnSessionExpired write FOnSessionExpired;

    property LinesNumDays : Integer read FLinesNumDays;
    property LinesNumGuests : Integer read FLinesNumGuests;
    property NumberGuestNights : Integer read FNumberGuestNights;
    property InvoiceIndexes : String read FInvoiceIndexes;

  end;



implementation

{ TInvoiceLine }
uses uAppGlobal,
     uUtils,
     uDateUtils,
     uD,
     hData,
     _Glob,
     uG
     , uSQLUtils;



constructor TInvoiceLine.Create(Owner : TInvoice; DataSet: TRoomerDataSet);
begin
  FOwner := Owner;


  FAutoGen := DataSet['AutoGen'];
  FReservation := DataSet['Reservation'];
  FRoomReservation := DataSet['RoomReservation'];
  FSplitNumber := DataSet['SplitNumber'];
  FItemNumber := DataSet['ItemNumber'];
  FPurchaseDate := SqlStringToDate(DataSet['PurchaseDate']);
  FInvoiceNumber := DataSet['InvoiceNumber'];
  FItemID := DataSet['ItemID'];
  FNumber := DataSet['Number'];
  FNumber := GetCalculatedNumberOfItems(FItemId, FNumber);
  FDescription := DataSet['Description'];
  FPrice := DataSet['Price'];
  FVATType := DataSet['VATType'];
  FAutoGenerated := DataSet['AutoGenerated'];
  FCurrencyRate := DataSet['CurrencyRate'];
  FCurrency := DataSet['Currency'];
  FReportDate := 0; // DataSet['ReportDate'];
  FReportTime := 0; // DataSet['ReportTime'];
  FPersons := DataSet['Persons'];
  FNights := DataSet['Nights'];
  FBreakfastPrice := DataSet['BreakfastPrice'];
  FAyear := DataSet['Ayear'];
  FAmon := DataSet['Amon'];
  FAday := DataSet['Aday'];
  FilTmp := DataSet['ilTmp'];
  FID := DataSet['ID'];
  FilAccountKey := DataSet['ilAccountKey'];
  FItemCurrency := DataSet['ItemCurrency'];
  FItemCurrencyRate := DataSet['ItemCurrencyRate'];
  FDiscount := DataSet['Discount'];
  FDiscount_isprecent := DataSet['Discount_isprecent'];
  FImportRefrence := DataSet['ImportRefrence'];
  FImportSource := DataSet['ImportSource'];
  FisPackage := DataSet['isPackage'];
  FitemAdded := DataSet['itemAdded'];
  FconfirmDate := DataSet['confirmDate'];
  FconfirmAmount := DataSet['confirmAmount'];
  FRoomReservationAlias := DataSet['RoomReservationAlias'];
  FItemSource := DataSet['ItemSource'];

  FInvoiceIndex := DataSet['InvoiceIndex'];
  IsDirty := False;
end;

constructor TInvoiceLine.Create(Owner: TInvoice);
begin
  FOwner := Owner;
  IsDirty := True;
end;

constructor TInvoiceLine.Create(Owner: TInvoice; Item: String; NumItems : Double; InvoiceLineType : TInvoiceLineType);
var temp : String;
begin
  FOwner := Owner;
  IsDirty := True;
  FInvoiceLineType := InvoiceLineType;

  FAutoGen := CreateAGUID;
  FReservation := Owner.Reservation;
  FRoomReservation := Owner.RoomReservation;
  FSplitNumber := Owner.SplitNumber;
  FInvoiceNumber := Owner.InvoiceNumber;
  FItemNumber := Owner.GetNewItemNumber;
  FPurchaseDate := Now;

  FItemID := Item;
  FNumber := GetCalculatedNumberOfItems(FItemId, NumItems);

  glb.LocateSpecificRecordAndGetValue('items', 'Item', Item, 'Description', FDescription);
  FPrice := glb.Items['Price'];
  temp := glb.Items['ItemType'];
  glb.LocateSpecificRecordAndGetValue('itemtypes', 'ItemType', temp, 'VATCode', FVATType);
  glb.LocateSpecificRecordAndGetValue('vatcodes', 'VATCode', FVATType, 'VATPercentage', FVatPercentage);

  FAutoGenerated := InvoiceLineType = ILT_SYSTEM;
  FCurrencyRate := Owner.ihCurrencyRate;
  FCurrency := Owner.ihCurrency;
  FReportDate := 0;
  FReportTime := 0;
  FPersons := 0;
  FNights := 0;
  FBreakfastPrice := 0;
  FAyear := Year(Now);
  FAmon := Month(Now);
  FAday := DayOfMonth(Now);
  FilTmp := '';
  FID := 0;
  FilAccountKey := glb.Items['BookKeepCode'];
  FItemCurrency := FCurrency;
  FItemCurrencyRate := FCurrencyRate;
  FDiscount := 0.00;
  FDiscount_isprecent := true;
  FImportRefrence := '';
  FImportSource := '';
  FisPackage := false;
  FitemAdded := Now;
  FconfirmDate := 2;
  FconfirmAmount := 0.00;
  FRoomReservationAlias := FRoomReservation;
  FItemSource := '';
  FInvoiceIndex := Owner.InvoiceIndex;
end;

function TInvoiceLine.GetCalculatedNumberOfItems(ItemId : String; dDefault : Double) : Double;
begin
  case glb.GetNumberBaseOfItem(itemId) of
    INB_USER_EDIT : result := dDefault;
    INB_ROOM_NIGHT : result := Owner.LinesNumDays;
    INB_GUEST_NIGHT : result := Owner.NumberGuestNights;
    INB_GUEST : result := Owner.LinesNumGuests;
    INB_ROOM : result := 1.0;
    INB_BOOKING : result := 1.0;
  else
    result := dDefault;
  end;
end;

function TInvoiceLine.GetCityTax: Double;
begin
  result := 0.00;
end;

function TInvoiceLine.GetTotal: Double;
begin
  result := FPrice * FNumber;
end;

function TInvoiceLine.GetTotalWOVat: Double;
begin
  result := 0.00;
end;

function TInvoiceLine.GetVat: Double;
begin
  result := 0.00;
end;

procedure TInvoiceLine.Insert;
var sql : String;
begin
  sql := 'INSERT into invoicelines' +
         '(' +
         '  Reservation ' +
         ', AutoGen ' +
         ', RoomReservation ' +
         ', SplitNumber ' +
         ', ItemNumber ' +
         ', PurchaseDate ' +
         ', InvoiceNumber ' +
         ', ItemId ' +
         ', Number ' +
         ', Description ' +
         ', Price ' +
         ', VATType ' +
         ', Total ' +
         ', TotalWOVat ' +
         ', VAT ' +
         ', CurrencyRate ' +
         ', Currency ' +
         ', Persons ' +
         ', Nights ' +
         ', BreakfastPrice ' +
         ', AutoGenerated ' +

         ', AYear ' +
         ', AMon ' +
         ', ADay ' +

         ', importRefrence ' +
         ', ImportSource ' +
         ', isPackage ' +
         ', confirmdate ' +
         ', confirmAmount ' +

         ')' +
         'Values' +

         '(' +
         '  ' + _db(Reservation) +
         ', ' + _db(_GetCurrentTick) +
         ', ' + _db(RoomReservation) +
         ', ' + _db(SplitNumber) +
         ', ' + _db(itemNumber) +
         ', ' + _db(PurchaseDate, True) +
         ', ' + _db(InvoiceNumber) +
         ', ' + _db(itemId) +
         ', ' + _db(Number) +
         ', ' + _db(Description) +
         ', ' + _db(Price) +
         ', ' + _db(VATType) +
         ', ' + _db(Total) +
         ', ' + _db(TotalWOVat) +
         ', ' + _db(Vat) +
         ', ' + _db(CurrencyRate) +
         ', ' + _db(Currency) +
         ', ' + _db(Persons) +
         ', ' + _db(Nights) +
         ', ' + _db(0.00) +
         ', ' + _db(false) +

         ', ' + _db(AYear) +
         ', ' + _db(AMon) +
         ', ' + _db(ADay) +
         ', ' + _db(importRefrence) +
         ', ' + _db(ImportSource) +
         ', ' + _db(isPackage) +
         ', ' + _db(confirmDate) +
         ', ' + _db(confirmAmount) +

         ')';
  d.roomerMainDataSet.DoCommand(sql);
end;

procedure TInvoiceLine.Save;
begin
  if FId = 0 then
    Insert
  else
    Update;

  IsDirty := False;
end;

procedure TInvoiceLine.SetCurrencyRate(const Value: Double);
begin
  if FCurrencyRate = Value then exit;
  FCurrencyRate := Value;
  IsDirty := True;
end;

procedure TInvoiceLine.SetDescription(const Value: String);
begin
  if FDescription = Value then exit;
  FDescription := Value;
  IsDirty := True;
end;

procedure TInvoiceLine.SetDirty(const Value: Boolean);
begin
  FDirty := Value;
end;

procedure TInvoiceLine.SetDiscount(const Value: Double);
begin
  if FDiscount = Value then exit;
  FDiscount := Value;
  IsDirty := True;
end;

procedure TInvoiceLine.SetDiscount_isprecent(const Value: Boolean);
begin
  if FDiscount_isprecent = Value then exit;
  FDiscount_isprecent := Value;
  IsDirty := True;
end;

procedure TInvoiceLine.SetInvoiceIndex(const Value: Integer);
begin
  if FInvoiceIndex = Value then exit;
  FInvoiceIndex := Value;
  IsDirty := True;
end;

procedure TInvoiceLine.SetInvoiceNumber(const Value: Integer);
begin
  if FInvoiceNumber = Value then exit;
  FInvoiceNumber := Value;
  IsDirty := True;
end;

procedure TInvoiceLine.SetItemID(const Value: String);
begin
  if FItemID = Value then exit;
  FItemID := Value;
  IsDirty := True;
end;

procedure TInvoiceLine.SetNumber(const Value: Double);
begin
  if FNumber = Value then exit;
  FNumber := Value;
  IsDirty := True;
end;

procedure TInvoiceLine.SetPrice(const Value: Double);
begin
  if FPrice = Value then exit;
  FPrice := Value;
  IsDirty := True;
end;

procedure TInvoiceLine.Update;
var sql : String;
begin
  sql := 'UPDATE invoicelines' +
         '  SET Reservation = ' + _db(Reservation) +
         ', RoomReservation = ' + _db(RoomReservation) +
         ', SplitNumber = ' + _db(SplitNumber) +
         ', ItemNumber = ' + _db(ItemNumber) +
         ', PurchaseDate = ' + _db(PurchaseDate) +
         ', InvoiceNumber = ' + _db(InvoiceNumber) +
         ', ItemId = ' + _db(ItemId) +
         ', Number = ' + _db(Number) +
         ', Description = ' + _db(Description) +
         ', Price = ' + _db(Price) +
         ', VATType = ' + _db(VATType) +
         ', Total = ' + _db(Total) +
         ', TotalWOVat = ' + _db(TotalWOVat) +
         ', VAT = ' + _db(VAT) +
         ', CurrencyRate = ' + _db(CurrencyRate) +
         ', Currency = ' + _db(Currency) +
         ', Persons = ' + _db(Persons) +
         ', Nights = ' + _db(Nights) +
         ', BreakfastPrice = ' + _db(BreakfastPrice) +
         ', AutoGenerated = ' + _db(AutoGenerated) +

         ', AYear = ' + _db(AYear) +
         ', AMon = ' + _db(AMon) +
         ', ADay = ' + _db(ADay) +

         ', importRefrence = ' + _db(importRefrence) +
         ', ImportSource = ' + _db(ImportSource) +
         ', isPackage = ' + _db(isPackage) +
         ', confirmdate = ' + _db(confirmdate) +
         ', confirmAmount = ' + _db(confirmAmount) +

         ' WHERE ID = ' + _db(Id);
  d.roomerMainDataSet.DoCommand(sql);
end;


{ TInvoice }

function TInvoice.AddItem(LineType: TInvoiceLineType; Item: String; NumItems: Double; InvoiceLineType : TInvoiceLineType): TInvoiceLine;
begin
  result := TInvoiceLine.Create(self, Item, NumItems, InvoiceLineType);
  IsDirty := True;
end;

constructor TInvoice.Create(Reservation, RoomReservation, SplitNumber, InvoiceNumber, InvoiceIndex: Integer);
begin
  InvoiceLines := TInvoiceLineList.Create(True);
  Payments := TInvoicePaymentList.Create(True);
  RoomRentsPerDay := TRoomRentPerdayDictionary.Create([doOwnsValues]);

  FReservation := Reservation;
  FRoomReservation := RoomReservation;
  FSplitNumber := SplitNumber;
  FInvoiceNumber := InvoiceNumber;
  FInvoiceIndex := InvoiceIndex;

  LoadInvoice;
  IsDirty := False;
end;

procedure TInvoice.DeleteLine(Line: TInvoiceLine);
begin
  InvoiceLines.Remove(Line);
  IsDirty := True;
end;

procedure TInvoice.DeletePayment(Payment: TInvoicePayment);
begin
  Payments.Remove(Payment);
  IsDirty := True;
end;

destructor TInvoice.Destroy;
begin
  InvoiceLines.Free;
  Payments.Free;
end;

procedure TInvoice.LoadInvoice;
var ExecutionPlan : TRoomerExecutionPlan;
    sql : String;
begin
  ExecutionPlan := d.roomerMainDataSet.CreateExecutionPlan;
  try
    // 0 - Get Invoice header with calculated addresee
    sql := 'SELECT CONVERT((SELECT GROUP_CONCAT(DISTINCT CONCAT(il1.InvoiceIndex, '';'', (SELECT SUM(il2.Total) FROM invoicelines il2 WHERE il2.RoomReservation=ih.RoomReservation '
      + 'AND il2.Reservation=ih.Reservation AND il2.InvoiceNumber=-1 AND il1.InvoiceIndex=il2.InvoiceIndex)) ORDER BY InvoiceIndex) '
      + 'FROM invoicelines il1 WHERE il1.RoomReservation=ih.RoomReservation AND il1.Reservation=ih.Reservation AND il1.InvoiceNumber=-1) USING utf8) AS InvoiceIndexes, '
      + '(SELECT InvoiceIndex FROM roomreservations rr WHERE rr.RoomReservation=ih.RoomReservation) rrInvoiceIndex, (SELECT SUM(RoomRate) FROM roomsdate rd WHERE rd.RoomReservation=ih.RoomReservation '
      + 'AND rd.Reservation=ih.Reservation AND rd.Paid=0 AND (NOT rd.ResFlag IN (''C'',''X'',''N'',''O''))) AS rrInvoiceTotal, '
      + 'ih.Reservation, ' +
        'ih.RoomReservation, ' +
        'ih.SplitNumber, ' +
        'ih.InvoiceNumber, ' +
        'ih.InvoiceDate, ' +
        'IFNULL((SELECT Customer FROM invoiceaddressees ia WHERE ia.invoiceNumber=ih.InvoiceNumber ' +
        '        AND ia.Reservation=ih.Reservation ' +
        '        AND ia.RoomReservation=ih.RoomReservation ' +
        '        AND ia.SplitNumber=ih.SplitNumber ' +
        '        AND ia.InvoiceIndex={InvoiceIndex} ' +
        '       ), ih.Customer) AS Customer, ' +
        'IFNULL((SELECT Name FROM invoiceaddressees ia WHERE ia.invoiceNumber=ih.InvoiceNumber ' +
        '        AND ia.Reservation=ih.Reservation ' +
        '        AND ia.RoomReservation=ih.RoomReservation ' +
        '        AND ia.SplitNumber=ih.SplitNumber ' +
        '        AND ia.InvoiceIndex={InvoiceIndex} ' +
        '       ), ih.Name) AS Name, ' +
        'IFNULL((SELECT Address1 FROM invoiceaddressees ia WHERE ia.invoiceNumber=ih.InvoiceNumber ' +
        '        AND ia.Reservation=ih.Reservation ' +
        '        AND ia.RoomReservation=ih.RoomReservation ' +
        '        AND ia.SplitNumber=ih.SplitNumber ' +
        '        AND ia.InvoiceIndex={InvoiceIndex} ' +
        '       ), ih.Address1) AS Address1, ' +
        'IFNULL((SELECT Address2 FROM invoiceaddressees ia WHERE ia.invoiceNumber=ih.InvoiceNumber ' +
        '        AND ia.Reservation=ih.Reservation ' +
        '        AND ia.RoomReservation=ih.RoomReservation ' +
        '        AND ia.SplitNumber=ih.SplitNumber ' +
        '        AND ia.InvoiceIndex={InvoiceIndex} ' +
        '       ), ih.Address2) AS Address2, ' +
        'IFNULL((SELECT Zip FROM invoiceaddressees ia WHERE ia.invoiceNumber=ih.InvoiceNumber ' +
        '        AND ia.Reservation=ih.Reservation ' +
        '        AND ia.RoomReservation=ih.RoomReservation ' +
        '        AND ia.SplitNumber=ih.SplitNumber ' +
        '        AND ia.InvoiceIndex={InvoiceIndex} ' +
        '       ), ih.Address3) AS Address3, ' +
        'IFNULL((SELECT City FROM invoiceaddressees ia WHERE ia.invoiceNumber=ih.InvoiceNumber ' +
        '        AND ia.Reservation=ih.Reservation ' +
        '        AND ia.RoomReservation=ih.RoomReservation ' +
        '        AND ia.SplitNumber=ih.SplitNumber ' +
        '        AND ia.InvoiceIndex={InvoiceIndex} ' +
        '       ), ih.Address4) AS Address4, ' +
        'IFNULL((SELECT Country FROM invoiceaddressees ia WHERE ia.invoiceNumber=ih.InvoiceNumber ' +
        '        AND ia.Reservation=ih.Reservation ' +
        '        AND ia.RoomReservation=ih.RoomReservation ' +
        '        AND ia.SplitNumber=ih.SplitNumber ' +
        '        AND ia.InvoiceIndex={InvoiceIndex} ' +
        '       ), ih.Country) AS Country, ' +
        'ih.Total, ' +
        'ih.TotalWOVAT, ' +
        'ih.TotalVAT, ' +
        'ih.TotalBreakFast, ' +
        'IFNULL((SELECT ExtraText FROM invoiceaddressees ia WHERE ia.invoiceNumber=ih.InvoiceNumber ' +
        '        AND ia.Reservation=ih.Reservation ' +
        '        AND ia.RoomReservation=ih.RoomReservation ' +
        '        AND ia.SplitNumber=ih.SplitNumber ' +
        '        AND ia.InvoiceIndex={InvoiceIndex} ' +
        '       ), ih.ExtraText) AS ExtraText, ' +
        'ih.Finished, ' +
        'ih.ReportDate, ' +
        'ih.ReportTime, ' +
        'ih.CreditInvoice, ' +
        'ih.OriginalInvoice, ' +
        'IFNULL((SELECT InvoiceType FROM invoiceaddressees ia WHERE ia.invoiceNumber=ih.InvoiceNumber ' +
        '        AND ia.Reservation=ih.Reservation ' +
        '        AND ia.RoomReservation=ih.RoomReservation ' +
        '        AND ia.SplitNumber=ih.SplitNumber ' +
        '        AND ia.InvoiceIndex={InvoiceIndex} ' +
        '       ), ih.InvoiceType) AS InvoiceType, ' +
        'ih.ihTmp, ' +
        'ih.ID, ' +
        'IFNULL((SELECT CustPID FROM invoiceaddressees ia WHERE ia.invoiceNumber=ih.InvoiceNumber ' +
        '        AND ia.Reservation=ih.Reservation ' +
        '        AND ia.RoomReservation=ih.RoomReservation ' +
        '        AND ia.SplitNumber=ih.SplitNumber ' +
        '        AND ia.InvoiceIndex={InvoiceIndex} ' +
        '       ), ih.CustPID) AS custPID, ' +
        'ih.RoomGuest, ' +
        '(SELECT Name FROM persons WHERE MainName=1 AND Reservation=ih.Reservation ORDER BY RoomReservation LIMIT 1) AS GuestName, ' +
        '(SELECT ContactEmail FROM reservations WHERE Reservation=ih.Reservation LIMIT 1) AS ContactEmail, ' +
        'ih.ihDate, ' +
        'ih.ihStaff, ' +
        'ih.ihPayDate, ' +
        'ih.ihConfirmDate, ' +
        'ih.ihInvoiceDate, ' +
// See note on the bottom of unit
        'IFNULL((SELECT ihCurrency FROM invoiceaddressees ia WHERE ia.invoiceNumber=ih.InvoiceNumber ' +
        '        AND ia.Reservation=ih.Reservation ' +
        '        AND ia.RoomReservation=ih.RoomReservation ' +
        '        AND ia.SplitNumber=ih.SplitNumber ' +
        '        AND ia.InvoiceIndex={InvoiceIndex} ' +
        '       ), ' +
        'ih.ihCurrencyRate, ' +
        'ih.invRefrence, ' +
        'ih.TotalStayTax, ' +
        'ih.TotalStayTaxNights, ' +
        'ih.showPackage, ' +
        'ih.staff, ' +
        'ih.location, ' +
        'ih.externalInvoiceId ' +
      'FROM invoiceheads ih where ih.Reservation = %d '#10 +
      '   and ih.RoomReservation = %d and ih.SplitNumber = %d '#10 +
      '   and ih.InvoiceNumber = -1 and ih.Finished = 0';
    sql := ReplaceString(format(sql, [FReservation, FRoomReservation, FSplitNumber]), '{InvoiceIndex}', inttostr(FInvoiceIndex));
    ExecutionPlan.AddQuery(sql);

    // 1 - Get Invoice lines
    sql := 'SELECT * FROM invoicelines WHERE Reservation=%d AND RoomReservation=%d AND SplitNumber=%d AND InvoiceNumber=%d AND InvoiceIndex=%d';
    sql := format(sql, [FReservation, FRoomReservation, FSplitNumber, FInvoiceNumber, FInvoiceIndex]);
    ExecutionPlan.AddQuery(sql);

    // 2 - Get Total Guest-Nights
    sql := 'SELECT SUM(IF(xxx.RoomReservation>0 AND xxx.Reservation>0, xxx.NumberOfGuests * xxx.NumberOfDays, ' +
           ' (SELECT SUM((SELECT COUNT(id) FROM roomsdate WHERE RoomReservation = pe.RoomReservation AND NOT (ResFlag IN (''X'',''C'',''N'')))) AS GuestNights ' +
           '   FROM persons pe ' +
           '   WHERE pe.Reservation=xxx.Reservation) ' +
           ')) AS NumberGuestNights, ' +
           'SUM(NumberOfDays) AS NumberOfDays, ' +
           'SUM(NumberOfGuests) AS NumberOfGuests ' +
           'FROM ( ' +
           'SELECT RoomReservation, Reservation, IF(il.RoomReservation>0 AND il.Reservation>0, (SELECT COUNT(ID) FROM roomsdate WHERE RoomReservation=il.RoomReservation AND NOT (ResFlag IN (''X'',''C'',''N'')) LIMIT 1), ' +
           '          IF(il.Reservation>0, (SELECT COUNT(ID) FROM roomsdate WHERE Reservation=il.Reservation AND NOT (ResFlag IN (''X'',''C'',''N'')) LIMIT 1), ' +
           '          0)) AS NumberOfDays, ' +
           ' ' +
           '       IF(il.RoomReservation>0 AND il.Reservation>0, (SELECT COUNT(ID) FROM persons WHERE RoomReservation=il.RoomReservation LIMIT 1), ' +
           '          IF(il.Reservation>0, (SELECT COUNT(ID) FROM persons WHERE Reservation=il.Reservation LIMIT 1), 0)) AS NumberOfGuests ' +

           'FROM roomreservations il ' +
           'where (%d <= 0 AND Reservation=%d) OR (RoomReservation = %d) ' +
           ')xxx';
    sql := format(sql, [FRoomReservation, FReservation, FRoomReservation]);
    ExecutionPlan.AddQuery(sql);

    // 3 - Get Payments
    sql := 'SELECT * FROM payments ' + ' where Reservation = %d ' +
           '   and RoomReservation = %d ' +
           '   and InvoiceNumber = -1 AND InvoiceIndex = %d';
    sql := format(sql, [FReservation, FRoomReservation, FInvoiceIndex]);
    ExecutionPlan.AddQuery(sql);

    // 4 - Get Room Rent
    sql := 'SELECT RoomReservation, Arrival, Departure, RoomNights, ' +
           '       GroupAccount, ' +
           '       Status, ' +
           '       Room, ' +
           '       RoomType, ' +
           '       Package, ' +
           '       NumChildren, ' +
           '       NumInfants, ' +
           '       RatePlanCode, ' +
           '       AverageRate, ' +
           '       RateCount, ' +
           '       IsPercentage, ' +
           '       RoomDescription, ' +
           '       RoomTypeDescription, ' +
           '       Discount, ' +
           '       RoomGuests, ' +
           '       RoomRate, ' +
           '       RoomRateExcl, ' +
           '       RoomRateVat, ' +
           '       CityTaxIncluded, ' +
           '       CityTaxIsPercentage, ' +
           '       CityTaxIsNettoBased, ' +
           '       CityTaxItem, ' +
           '       IF(TAX_BASE=''ROOM_NIGHT'', RoomNights, ' +
           '         IF(TAX_BASE=''GUEST_NIGHT'', RoomNights * RoomGuests, ' +
           '           IF(TAX_BASE=''ROOM'', 1, ' +
           '             IF(TAX_BASE=''BOOKING'' , 1, ' +
           '               IF(TAX_BASE=''GUEST'', RoomGuests, RoomNights))))) AS CityTaxEntities, ' +
           '       ROUND(CityTaxPerNight, 2) AS CityTaxPerEntity, ' +
           '       ROUND((CityTaxPerNight/(1+(VATPercentage/100))), 2) CityTaxPerEntityExcl, ' +
           '       ROUND(CityTaxPerNight-ROUND((CityTaxPerNight/(1+(VATPercentage/100))), 2), 2) AS CityTaxPerEntityVat ' +
           'FROM ' +
           '(SELECT RoomReservation, Arrival, Departure, RoomNights, ' +
           '       GroupAccount, ' +
           '       Status, ' +
           '       Room, ' +
           '       RoomType, ' +
           '       Package, ' +
           '       NumChildren, ' +
           '       NumInfants, ' +
           '       RatePlanCode, ' +
           '       AverageRate, ' +
           '       RateCount, ' +
           '       IsPercentage, ' +
           '       RoomDescription, ' +
           '       RoomTypeDescription, ' +
           '       Discount, ' +
           '       RoomGuests, ' +
           '       RoomRate, ' +
           '       RoomRateExcl, ' +
           '       RoomRateVat, ' +
           '       CityTaxIncluded, ' +
           '       CityTaxIsPercentage, ' +
           '       CityTaxIsNettoBased, ' +
           '       i.Item AS CityTaxItem, ' +
           '       IF(CityTaxIncluded, IF(CityTaxIsPercentage, ' +
           '                              IF(CityTaxIsNettoBased, ' +
           '                                 RoomRateExcl-(RoomRateExcl/(1+(AMOUNT/100))), ' +
           '                                 RoomRate-(RoomRate/(1+(AMOUNT/100))) ' +
           '							  ), ' +
           '                              AMOUNT), ' +
           '                           IF(CityTaxIsPercentage, ' +
           '                              IF(CityTaxIsNettoBased, ' +
           '                                 RoomRateExcl * AMOUNT/100, ' +
           '                                 RoomRate * AMOUNT/100 ' +
           '							  ), ' +
           '							  AMOUNT)) AS CityTaxPerNight, ' +
           '		v.VATPercentage, ' +
           '        TAX_BASE ' +
           'FROM ( ' +
           'SELECT rr.RoomReservation, STR_TO_DATE(rr.Arrival,''%Y-%m-%d'') AS Arrival, STR_TO_DATE(rr.Departure,''%Y-%m-%d'') AS Departure, ' +
           '       rr.GroupAccount, ' +
           '       rr.Status, ' +
           '       rr.Room, ' +
           '       rr.RoomType, ' +
           '       rr.Package, ' +
           '       rr.NumChildren, ' +
           '       rr.NumInfants, ' +
           '       rr.RatePlanCode, ' +
           '       (SELECT AVG(rd1.RoomRate) FROM roomsdate rd1 WHERE rd1.RoomReservation=rr.RoomReservation AND (rd1.ResFlag NOT IN (''X'',''C''))) AS AverageRate, ' +
           '       rr.RateCount, ' +
           '       rd.IsPercentage, ' +
           '       (SELECT Description FROM rooms r WHERE r.Room = rd.Room) AS RoomDescription, ' +
           '       (SELECT Description FROM roomtypes r WHERE r.RoomType = rd.RoomType) AS RoomTypeDescription, ' +
           '       AVG(rd.Discount) AS Discount, ' +
           '       AVG(rd.RoomRate) AS RoomRate, ' +
           '       (SELECT COUNT(rd1.id) FROM roomsdate rd1 WHERE rd1.Reservation = rd.Reservation AND rd1.RoomReservation = rd.RoomReservation AND NOT (rd1.ResFlag IN (''C'',''X'')) ) AS RoomNights, ' +
           '       (SELECT COUNT(pe.id) FROM persons pe WHERE pe.Reservation = rd.Reservation AND pe.RoomReservation = rd.RoomReservation) AS RoomGuests, ' +
           '       ROUND(AVG(rd.RoomRate / (1 + (v.VATPercentage / 100))), 2) AS RoomRateExcl, ' +
           '       ROUND(AVG(rd.RoomRate) - ROUND(AVG(rd.RoomRate / (1 + (v.VATPercentage / 100))), 2), 2) AS RoomRateVat, ' +
           '       to_bool(IF(t.INCL_EXCL=''INCLUDED'', 1, IF(t.INCL_EXCL=''EXCLUDED'', 0, IF(cu.StayTaxIncluted=1, 1, 0)))) AS CityTaxIncluded, ' +
           '       to_bool(IF(t.TAX_TYPE=''PERCENTAGE'', 1, 0)) AS CityTaxIsPercentage, ' +
           '       to_bool(IF(t.NETTO_AMOUNT_BASED=''TRUE'', 1, 0)) AS CityTaxIsNettoBased, ' +
           '       t.* ' +

           'FROM roomsdate rd ' +
           '    JOIN roomreservations rr ON rr.RoomReservation=rd.RoomReservation ' +
           '    JOIN reservations r ON rr.Reservation=rd.Reservation ' +
           '    JOIN customers cu ON cu.Customer=r.Customer ' +
           '    JOIN control c ' +
           '    JOIN items i ON i.Item=c.RoomRentItem ' +
           '    JOIN itemtypes it ON it.ItemType=i.ItemType ' +
           '    JOIN vatcodes v ON v.VATCode=it.VATCode ' +
           '    LEFT JOIN home100.TAXES t ON HOTEL_ID=TRIM(SUBSTR(DATABASE(), 9, 15)) '#10 +
           '                                 AND ((t.probe_date = ''STAYDATE'' and rd.ADate BETWEEN t.VALID_FROM AND t.VALID_TO) '#10 +
           '                                    OR (t.probe_date = ''INVOICEDATE'' and CURRENT_DATE BETWEEN t.VALID_FROM AND t.VALID_TO)) '#10 +
           'WHERE (((%d = 0) AND rd.Reservation = %d) OR rd.RoomReservation = %d) AND rr.InvoiceIndex = %d AND NOT (rd.ResFlag IN (''C'',''X'')) ' +
           'GROUP BY rd.Reservation, rd.RoomReservation ' +
           ') xxx ' +
           'JOIN control c ' +
           'JOIN items i ON i.id=xxx.BOOKING_ITEM_ID ' +
           'JOIN itemtypes it ON it.ItemType=i.ItemType ' +
           'JOIN vatcodes v ON v.VATCode=it.VATCode ' +
           ') yyy';
    sql := format(sql, [FRoomReservation, FReservation, FRoomReservation, FInvoiceIndex]);
    ExecutionPlan.AddQuery(sql);

    // 5 - Get Room Rent per day
    sql := 'SELECT * FROM roomsdate rd WHERE ((%d=0 AND rd.Reservation=%d) OR rd.RoomReservation=%d) AND (NOT ResFlag IN (''X'',''C''))';
    sql := format(sql, [FRoomReservation, FReservation, FRoomReservation]);

    ExecutionPlan.Execute(ptQuery);

    ReadTotalGuestNights(ExecutionPlan.Results[2]);
    ReadRoomRent(ExecutionPlan.Results[4]);
    ReadHeader(ExecutionPlan.Results[0]);
    ReadLines(ExecutionPlan.Results[1]);
    ReadPayments(ExecutionPlan.Results[3]);
    ReadRoomRentPerDay(ExecutionPlan.Results[5]);

  finally
    ExecutionPlan.Free;
  end;
end;

procedure TInvoice.MoveLine(Line : TInvoiceLine; NewReservation, NewRoomReservation, NewInvoiceIndex: Integer);
begin
  Line.Reservation := NewReservation;
  Line.RoomReservation := NewRoomReservation;
  Line.InvoiceIndex := NewInvoiceIndex;

  if (Line.Reservation <> Reservation) OR
     (Line.RoomReservation <> RoomReservation) OR
     (Line.InvoiceIndex <> InvoiceIndex) then
  begin
    Line.Save;
    InvoiceLines.Remove(Line);   // Shouldnt be this .Extract() ?
    IsDirty := True;
  end;
end;

procedure TInvoice.MovePayment(Payment: TInvoicePayment; NewReservation, NewRoomReservation, NewInvoiceIndex: Integer);
begin
  Payment.Reservation := NewReservation;
  Payment.RoomReservation := NewRoomReservation;
  Payment.InvoiceIndex := NewInvoiceIndex;

  if (Payment.Reservation <> Reservation) OR
     (Payment.RoomReservation <> RoomReservation) OR
     (Payment.InvoiceIndex <> InvoiceIndex) then
  begin
    Payment.Save;
    Payments.Remove(Payment);   // Shouldnt be this .Extract() ?
    IsDirty := True;
  end;
end;

function TInvoice.PaymentIndex(Payment: TInvoicePayment): Integer;
begin
  result := Payments.IndexOf(Payment);
end;

function TInvoice.GetBalance: Double;
begin
  result := Total - TotalPayments;
end;

function TInvoice.GetCount: Integer;
begin
  result := InvoiceLines.Count;
end;

function TInvoice.GetInvoiceLine(index: Integer): TInvoiceLine;
begin
  result := InvoiceLines[index];
end;

function TInvoice.GetInvoicePayment(index: Integer): TInvoicePayment;
begin
  result := Payments[index];
end;

function TInvoice.GetNewItemNumber: Integer;
var i: Integer;
begin
  result := 1;
  for i := 0 to InvoiceLines.Count - 1 do
    if InvoiceLines[i].FItemNumber >= result then
      result := InvoiceLines[i].FItemNumber + 1;
end;

function TInvoice.GetPaymentCount: Integer;
begin
  result := Payments.Count;
end;

function TInvoice.GetTotal: Double;
var i: Integer;
begin
  result := 0.00;
  for i := 0 to InvoiceLines.Count - 1 do
    result := result + InvoiceLines[i].Total;
end;

function TInvoice.GetTotalPayments: Double;
var Payment : TInvoicePayment;
begin
  result := 0;
  for Payment IN Payments do
    result := result + Payment.Amount;
end;

function TInvoice.GetTotalStayTax: Double;
var i: Integer;
begin
  result := 0.00;
  for i := 0 to InvoiceLines.Count - 1 do
    result := result + InvoiceLines[i].CityTax;
end;

function TInvoice.GetTotalVAT: Double;
var i: Integer;
begin
  result := 0.00;
  for i := 0 to InvoiceLines.Count - 1 do
    result := result + InvoiceLines[i].Vat;
end;

function TInvoice.GetTotalWOVAT: Double;
var i: Integer;
begin
  result := 0.00;
  for i := 0 to InvoiceLines.Count - 1 do
    result := result + InvoiceLines[i].TotalWOVat;
end;

function TInvoice.LineIndex(Line: TInvoiceLine): Integer;
begin
  result := InvoiceLines.IndexOf(Line);
end;

procedure TInvoice.ReadHeader(RecSet : TRoomerDataSet);
begin
  RecSet.First;
  If NOT RecSet.Eof then
  begin
    FCustomer := RecSet['Customer'];
    FName := RecSet['Name'];
    FGuestName := RecSet['GuestName'];
    FContactEmail := RecSet['ContactEmail'];
    FAddress1 := RecSet['Address1'];
    FAddress2 := RecSet['Address2'];
    FAddress3 := RecSet['Address3'];
    FAddress4 := RecSet['Address4'];
    FCountry := RecSet['Country'];
    FTotalBreakFast := RecSet['TotalBreakFast'];
    FExtraText := RecSet['ExtraText'];
    FFinished := RecSet['Finished'];
    FReportDate := 0; // RecSet['ReportDate'];
    FReportTime := 0; // RecSet['ReportTime'];
    FCreditInvoice := RecSet['CreditInvoice'];
    FOriginalInvoice := RecSet['OriginalInvoice'];
    FInvoiceType := RecSet['InvoiceType'];
    FihTmp := RecSet['ihTmp'];
    FID := RecSet['ID'];
    FcustPID := RecSet['custPID'];
    FRoomGuest := RecSet['RoomGuest'];
    FihDate := RecSet['ihDate'];
    FihStaff := RecSet['ihStaff'];
    FihPayDate := RecSet['ihPayDate'];
    FihConfirmDate := RecSet['ihConfirmDate'];
    FihInvoiceDate := RecSet['ihInvoiceDate'];
    FihCurrency := RecSet['ihCurrency'];
    FihCurrencyRate := RecSet['ihCurrencyRate'];
    FinvRefrence := RecSet['invRefrence'];
    FshowPackage := RecSet['showPackage'];
    Fstaff := RecSet['staff'];
    Flocation := RecSet['location'];
    FexternalInvoiceId := RecSet['externalInvoiceId'];

    FInvoiceIndexes := RecSet['InvoiceIndexes'];
    FRRInvoiceIndex := RecSet['rrInvoiceIndex'];
  end;
end;

procedure TInvoice.ReadRoomRentPerDay(RecSet : TRoomerDataSet);
var rrpd : TRoomRentPerDay;
begin
  RecSet.First;
  while NOT RecSet.Eof do
  begin
    rrpd := TRoomRentPerDay.Create(RecSet);
    RoomRentsPerDay.Add(format('%s.%s', [rrpd.ADate, inttostr(rrpd.RoomReservation)]), rrpd);

    RecSet.Next;
  end;
end;

function TInvoice.GetRoomRentPerDay(ADate : TDate; RoomReservation : Integer) : TRoomRentPerDay;
begin
  if NOT RoomRentsPerDay.TryGetValue(format('%s.%s', [DateToSqlString(ADate), inttostr(RoomReservation)]), result) then
    result := nil;
end;


procedure TInvoice.ReadLines(RecSet : TRoomerDataSet);
begin
  RecSet.First;
  while NOT RecSet.Eof do
  begin
    InvoiceLines.Add(TInvoiceLine.Create(self, RecSet));
    RecSet.Next;
  end;
end;

procedure TInvoice.ReadRoomRent(RecSet : TRoomerDataSet);
var InvoiceLine : TInvoiceLine;
begin
  RecSet.First;
  while NOT RecSet.Eof do
  begin
    InvoiceLine := TInvoiceLine.Create(self, g.qRoomRentItem, RecSet['RoomNights'], ILT_SYSTEM);
    InvoiceLine.Price := RecSet['RoomRate'];
    InvoiceLine.RoomReservation := RecSet['RoomReservation'];
    InvoiceLine.Arrival := RecSet['Arrival'];
    InvoiceLine.Departure := RecSet['Departure'];

    InvoiceLine.GroupAccount := RecSet['GroupAccount'];
    InvoiceLine.Status := RecSet['Status'];
    InvoiceLine.Room := RecSet['Room'];
    InvoiceLine.RoomType := RecSet['RoomType'];
    InvoiceLine.Package := RecSet['Package'];
    InvoiceLine.NumChildren := RecSet['NumChildren'];
    InvoiceLine.NumInfants := RecSet['NumInfants'];
    InvoiceLine.RatePlanCode := RecSet['RatePlanCode'];
    InvoiceLine.AverageRate := RecSet['AverageRate'];
    InvoiceLine.RateCount := RecSet['RateCount'];
    InvoiceLine.IsPercentage := RecSet['IsPercentage'];
    InvoiceLine.RoomDescription := RecSet['RoomDescription'];
    InvoiceLine.RoomTypeDescription := RecSet['RoomTypeDescription'];
    InvoiceLine.RoomDiscount := RecSet['Discount'];
    InvoiceLine.RoomGuests := RecSet['RoomGuests'];
    InvoiceLine.RoomNights := RecSet['RoomNights'];
    InvoiceLine.GuestName := RecSet['GuestName'];

    InvoiceLine.IsDirty := False;
    InvoiceLines.Add(InvoiceLine);

    if NOT RecSet['CityTaxIncluded'] then
    begin
      InvoiceLine := TInvoiceLine.Create(self, RecSet['CityTaxItem'], RecSet['CityTaxEntities'], ILT_SYSTEM);
      InvoiceLine.Price := RecSet['CityTaxPerEntity'];
      InvoiceLine.RoomReservation := RecSet['RoomReservation'];
      InvoiceLine.Arrival := RecSet['Arrival'];
      InvoiceLine.Departure := RecSet['Departure'];

      InvoiceLine.GroupAccount := RecSet['GroupAccount'];
      InvoiceLine.Status := RecSet['Status'];
      InvoiceLine.Room := RecSet['Room'];
      InvoiceLine.RoomType := RecSet['RoomType'];
      InvoiceLine.Package := RecSet['Package'];
      InvoiceLine.NumChildren := RecSet['NumChildren'];
      InvoiceLine.NumInfants := RecSet['NumInfants'];
      InvoiceLine.RatePlanCode := RecSet['RatePlanCode'];
      InvoiceLine.AverageRate := RecSet['AverageRate'];
      InvoiceLine.RateCount := RecSet['RateCount'];
      InvoiceLine.IsPercentage := RecSet['IsPercentage'];
      InvoiceLine.RoomDescription := RecSet['RoomDescription'];
      InvoiceLine.RoomTypeDescription := RecSet['RoomTypeDescription'];
      InvoiceLine.RoomDiscount := RecSet['Discount'];
      InvoiceLine.RoomGuests := RecSet['RoomGuests'];
      InvoiceLine.RoomNights := RecSet['RoomNights'];

      InvoiceLine.IsDirty := False;
      InvoiceLines.Add(InvoiceLine);
    end;

    RecSet.Next;
  end;
end;

procedure TInvoice.ReadTotalGuestNights(RecSet : TRoomerDataSet);
begin
  RecSet.First;
  FLinesNumDays := RecSet['NumberOfDays'];
  FLinesNumGuests := RecSet['NumberOfGuests'];
  FNumberGuestNights := RecSet['NumberGuestNights'];
end;

procedure TInvoice.ReadPayments(RecSet : TRoomerDataSet);
begin
  RecSet.First;
  while NOT RecSet.Eof do
  begin
    Payments.Add(TInvoicePayment.Create(self, RecSet));
    RecSet.Next;
  end;
end;

function TInvoice.SqlForAddressee : String;
begin
  result := format('INSERT INTO invoiceaddressees ' +
         '(InvoiceIndex, ' +
         'Reservation, ' +
         'RoomReservation, ' +
         'SplitNumber, ' +
         'InvoiceNumber, ' +
         'Customer, ' +
         'Name, ' +
         'Address1, ' +
         'Address2, ' +
         'Zip, ' +
         'City, ' +
         'Country, ' +
         'ExtraText, ' +
         'custPID, ' +
         'InvoiceType, ' +
         'ihCurrency ' +
         ' ) ' +
         'VALUES ' +
         '(%d, ' +
         '%d, ' +
         '%d, ' +
         '%d, ' +
         '%d, ' +
         '%s, ' +
         '%s, ' +
         '%s, ' +
         '%s, ' +
         '%s, ' +
         '%s, ' +
         '%s, ' +
         '%s, ' +
         '%s, ' +
         '%d, ' +
         '%s ' +
         ') ',
         [
          InvoiceIndex,
          Reservation,
          RoomReservation,
          SplitNumber,
          InvoiceNumber,
          _db(Customer),
          _db(Name),
          _db(Address1),
          _db(Address2),
          _db(Address3),
          _db(Address4),
          _db(Country),
          _db(ExtraText),
          _db(CustPID),
          InvoiceType,
          _db(ihCurrency)
          ])

          +

         format('ON DUPLICATE KEY UPDATE ' +
         'InvoiceNumber=%d, ' +
         'Customer=%s, ' +
         'Name=%s, ' +
         'Address1=%s, ' +
         'Address2=%s, ' +
         'Zip=%s, ' +
         'City=%s, ' +
         'Country=%s, ' +
         'ExtraText=%s, ' +
         'custPID=%s, ' +
         'InvoiceType=%d, ' +
         'ihCurrency=%s',
         [
          InvoiceNumber,
          _db(Customer),
          _db(Name),
          _db(Address1),
          _db(Address2),
          _db(Address3),
          _db(Address4),
          _db(Country),
          _db(ExtraText),
          _db(CustPID),
          InvoiceType,
          _db(ihCurrency)
         ]);
end;

procedure TInvoice.insert;
var ExecutionPlan : TRoomerExecutionPlan;
    sql : String;
begin
  ExecutionPlan := d.roomerMainDataSet.CreateExecutionPlan;
  try
    sql := 'INSERT into invoiceheads ' +
           '(' +
           '  Reservation ' +
           ', RoomReservation ' +
           ', SplitNumber ' +

           ', InvoiceNumber ' +
           ', InvoiceDate ' +

           ', Customer ' +
           ', Name ' +
           ', CustPid ' +
           ', RoomGuest ' +

           ', Address1 ' +
           ', Address2 ' +
           ', Address3 ' +
           ', Address4 ' +
           ', Country ' +
           ', Total ' +
           ', TotalWOVat ' +
           ', TotalVat ' +
           ', TotalBreakfast ' +
           ', ExtraText ' +
           ', OriginalInvoice ' +
           ', Finished ' +
           ', InvoiceType ' +
           ', ihStaff ' +
           ', ihDate ' +
           ', ihInvoiceDate ' +
           ', ihConfirmDate ' +
           ', ihPayDate ' +
           ', invRefrence ' +
           ', ihCurrency ' + // **98
           ', ihCurrencyrate ' + // **98
           ', showPackage ' + // *99+
           ', Location ' + // *99+

           ')' +
           'Values' +
           '(' +
           '  ' + _db(Reservation) +
           ', ' + _db(RoomReservation) +
           ', ' + _db(SplitNumber) +
           ', ' + _db(InvoiceNumber) +
           ', ' + _db(InvoiceDate, True) +
           ', ' + format('(SELECT IFNULL((SELECT Customer FROM invoiceaddressees ia WHERE ia.invoiceNumber=%d ' +
            '        AND ia.Reservation=%d ' +
            '        AND ia.RoomReservation=%d ' +
            '        AND ia.SplitNumber=%d ' +
            '        AND ia.InvoiceIndex=%d ' +
            '       ), %s))', [InvoiceNumber, Reservation, RoomReservation, SplitNumber, InvoiceIndex, _db(Customer)]) +
           ', ' + format('(SELECT IFNULL((SELECT Name FROM invoiceaddressees ia WHERE ia.invoiceNumber=%d ' +
            '        AND ia.Reservation=%d ' +
            '        AND ia.RoomReservation=%d ' +
            '        AND ia.SplitNumber=%d ' +
            '        AND ia.InvoiceIndex=%d ' +
            '       ), %s))', [InvoiceNumber, Reservation, RoomReservation, SplitNumber, InvoiceIndex, _db(Name)]) +
           ', ' + format('(SELECT IFNULL((SELECT CustPid FROM invoiceaddressees ia WHERE ia.invoiceNumber=%d ' +
            '        AND ia.Reservation=%d ' +
            '        AND ia.RoomReservation=%d ' +
            '        AND ia.SplitNumber=%d ' +
            '        AND ia.InvoiceIndex=%d ' +
            '       ), %s))', [InvoiceNumber, Reservation, RoomReservation, SplitNumber, InvoiceIndex, _db(CustPID)]) +
           ', ' + _db(RoomGuest) +
           ', ' + format('(SELECT IFNULL((SELECT Address1 FROM invoiceaddressees ia WHERE ia.invoiceNumber=%d ' +
            '        AND ia.Reservation=%d ' +
            '        AND ia.RoomReservation=%d ' +
            '        AND ia.SplitNumber=%d ' +
            '        AND ia.InvoiceIndex=%d ' +
            '       ), %s))', [InvoiceNumber, Reservation, RoomReservation, SplitNumber, InvoiceIndex, _db(Address1)]) +
           ', ' + format('(SELECT IFNULL((SELECT Address2 FROM invoiceaddressees ia WHERE ia.invoiceNumber=%d ' +
            '        AND ia.Reservation=%d ' +
            '        AND ia.RoomReservation=%d ' +
            '        AND ia.SplitNumber=%d ' +
            '        AND ia.InvoiceIndex=%d ' +
            '       ), %s))', [InvoiceNumber, Reservation, RoomReservation, SplitNumber, InvoiceIndex, _db(Address2)]) +
           ', ' + format('(SELECT IFNULL((SELECT Zip FROM invoiceaddressees ia WHERE ia.invoiceNumber=%d ' +
            '        AND ia.Reservation=%d ' +
            '        AND ia.RoomReservation=%d ' +
            '        AND ia.SplitNumber=%d ' +
            '        AND ia.InvoiceIndex=%d ' +
            '       ), %s))', [InvoiceNumber, Reservation, RoomReservation, SplitNumber, InvoiceIndex, _db(Address3)]) +
           ', ' + format('(SELECT IFNULL((SELECT City FROM invoiceaddressees ia WHERE ia.invoiceNumber=%d ' +
            '        AND ia.Reservation=%d ' +
            '        AND ia.RoomReservation=%d ' +
            '        AND ia.SplitNumber=%d ' +
            '        AND ia.InvoiceIndex=%d ' +
            '       ), %s))', [InvoiceNumber, Reservation, RoomReservation, SplitNumber, InvoiceIndex, _db(Address4)]) +
           ', ' + format('(SELECT IFNULL((SELECT Country FROM invoiceaddressees ia WHERE ia.invoiceNumber=%d ' +
            '        AND ia.Reservation=%d ' +
            '        AND ia.RoomReservation=%d ' +
            '        AND ia.SplitNumber=%d ' +
            '        AND ia.InvoiceIndex=%d ' +
            '       ), %s))', [InvoiceNumber, Reservation, RoomReservation, SplitNumber, InvoiceIndex, _db(Country)]) +
           ', ' + _CommaToDot(floattostr(Total)) +
           ', ' + _CommaToDot(floattostr(TotalWOVat)) +
           ', ' + _CommaToDot(floattostr(TotalVat)) +
           ', ' + _CommaToDot(floattostr(0.00)) +
           ', ' + _db('') +
           ', ' + inttostr(OriginalInvoice) +
           ', ' + _db(false) +
           ', ' + inttostr(1) +
           ', ' + _db(g.qUser) +
           ', ' + _db(Date, True) +
           ', ' + _db(ihInvoiceDate, True) +
           ', ' + _db(ihConfirmDate, True) +
           ', ' + _db(ihPayDate, True) +
           ', ' + _db(InvRefrence) +
           ', ' + _db(ihCurrency) +
           ', ' + _db(ihCurrencyRate) +
           ', ' + _db(showPackage) +
           ', ' + _db(Location) +
           ')';

    ExecutionPlan.AddExec(sql);
    ExecutionPlan.AddExec(SqlForAddressee);

    ExecutionPlan.Execute(ptExec)

  finally
    ExecutionPlan.Free;
  end;
end;

procedure TInvoice.update;
var ExecutionPlan : TRoomerExecutionPlan;
    sql : String;
begin
  ExecutionPlan := d.roomerMainDataSet.CreateExecutionPlan;
  try
    sql := 'UPDATE invoiceheads ' +
           ' SET Reservation = ' + _db(Reservation) +
           ', RoomReservation ' + _db(RoomReservation) +
           ', SplitNumber ' + _db(SplitNumber) +

           ', InvoiceNumber ' + _db(InvoiceNumber) +
           ', InvoiceDate ' + _db(InvoiceDate, true) +

           ', Customer ' + _db(Customer) +
           ', Name ' + _db(Name) +
           ', CustPid ' + _db(CustPid) +
           ', RoomGuest ' + _db(RoomGuest) +

           ', Address1 ' + _db(Address1) +
           ', Address2 ' + _db(Address2) +
           ', Address3 ' + _db(Address3) +
           ', Address4 ' + _db(Address4) +
           ', Country ' + _db(Country) +
           ', Total ' + _db(Total) +
           ', TotalWOVat ' + _db(TotalWOVat) +
           ', TotalVat ' + _db(TotalVat) +
           ', TotalBreakfast ' + _db(TotalBreakfast) +
           ', ExtraText ' + _db(ExtraText) +
           ', OriginalInvoice ' + _db(OriginalInvoice) +
           ', Finished ' + _db(Finished) +
           ', InvoiceType ' + _db(InvoiceType) +
           ', ihStaff ' + _db(ihStaff) +
           ', ihDate ' + _db(ihDate) +
           ', ihInvoiceDate ' + _db(ihInvoiceDate) +
           ', ihConfirmDate ' + _db(ihConfirmDate) +
           ', ihPayDate ' + _db(ihPayDate) +
           ', invRefrence ' + _db(invRefrence) +
           ', ihCurrency ' + _db(ihCurrency) +
           ', ihCurrencyrate ' + _db(ihCurrencyrate) +
           ', showPackage ' + _db(showPackage) +
           ', Location ' + _db(Location) +

           ' WHERE id = ' + _db(id);

    ExecutionPlan.AddExec(sql);
    ExecutionPlan.AddExec(SqlForAddressee);

    ExecutionPlan.Execute(ptExec)

  finally
    ExecutionPlan.Free;
  end;
end;

procedure TInvoice.Save;
var Line : TInvoiceLine;
    Payment : TInvoicePayment;
begin
  if id = 0 then
    insert
  else
    update;

  for Line in InvoiceLines do
    if Line.IsDirty then
      Line.Save;

  for Payment in Payments do
    if Payment.IsDirty then
      Payment.Save;
end;

procedure TInvoice.SetAddress1(const Value: String);
begin
  if FAddress1 = Value then exit;
  FAddress1 := Value;
  IsDirty := True;
end;

procedure TInvoice.SetAddress2(const Value: String);
begin
  if FAddress2 = Value then exit;
  FAddress2 := Value;
  IsDirty := True;
end;

procedure TInvoice.SetAddress3(const Value: String);
begin
  if FAddress3 = Value then exit;
  FAddress3 := Value;
  IsDirty := True;
end;

procedure TInvoice.SetAddress4(const Value: String);
begin
  if FAddress4 = Value then exit;
  FAddress4 := Value;
  IsDirty := True;
end;

procedure TInvoice.SetContactEmail(const Value: String);
begin
  FContactEmail := Value;
end;

procedure TInvoice.SetCountry(const Value: String);
begin
  if FCountry = Value then exit;
  FCountry := Value;
  IsDirty := True;
end;

procedure TInvoice.SetCustomer(const Value: String);
begin
  if FCustomer = Value then exit;
  FCustomer := Value;
  IsDirty := True;
end;

procedure TInvoice.SetDirty(const Value: Boolean);
begin
  FDirty := Value;
end;

procedure TInvoice.SetExtraText(const Value: String);
begin
  if FExtraText = Value then exit;
  FExtraText := Value;
  IsDirty := True;
end;

procedure TInvoice.SetGuestName(const Value: String);
begin
  FGuestName := Value;
end;

procedure TInvoice.SetInvoiceIndex(const Value: Integer);
var i: Integer;
begin
  for i := 0 to InvoiceLines.Count - 1 do
    InvoiceLines[i].InvoiceIndex := Value;
  IsDirty := True;
end;

procedure TInvoice.SetInvoiceNumber(const Value: Integer);
var i: Integer;
begin
  FInvoiceNumber := Value;
  for i := 0 to InvoiceLines.Count - 1 do
    InvoiceLines[i].InvoiceNumber := FInvoiceNumber;
  IsDirty := True;
end;

procedure TInvoice.SetInvoiceType(const Value: Integer);
begin
  FInvoiceType := Value;
  IsDirty := True;
end;

procedure TInvoice.SetName(const Value: String);
begin
  FName := Value;
  IsDirty := True;
end;

procedure TInvoice.SetOriginalInvoice(const Value: Integer);
begin
  FOriginalInvoice := Value;
  IsDirty := True;
end;

procedure TInvoice.SetRoomGuest(const Value: String);
begin
  FRoomGuest := Value;
  IsDirty := True;
end;

{ TInvoicePayment }

constructor TInvoicePayment.Create(Owner: TInvoice; PayType: String;
      Amount: Double;
      Description : String;
      Currency : String;
      PaymentLineType: TPaymentLineType);
begin
  FReservation := Owner.Reservation;
  FRoomReservation := Owner.RoomReservation;
  FInvoiceNumber := Owner.InvoiceNumber;
  FPerson := 0;
  FAutoGen := CreateAGUID;
  FTypeIndex := PaymentLineType;
  FPayDate := trunc(Now);
  FPayType := PayType;
  FAmount := Amount;
  FDescription := Description;
  glb.LocateSpecificRecordAndGetValue('currencies', 'Currency', Currency, 'AValue', FCurrencyRate);
  FCurrency := Currency;
  FAyear := Year(Now);
  FAmon := Month(Now);
  FAday := DayOfMonth(Now);
  FID := 0;
  FconfirmDate := 2;
  FNotes := '';
  Fstaff := d.roomerMainDataSet.username;
  FdtCreated := now;
  FInvoiceIndex := Owner.InvoiceIndex;

  IsDirty := True;
end;

constructor TInvoicePayment.Create(Owner: TInvoice; DataSet: TRoomerDataSet);
begin
  FReservation := Owner.Reservation;
  FRoomReservation := Owner.RoomReservation;
  FInvoiceNumber := Owner.InvoiceNumber;
  FPerson := DataSet['Person'];
  FAutoGen := DataSet['AutoGen'];
  FTypeIndex := TPaymentLineType(DataSet.FieldByName('TypeIndex').AsInteger);
  FPayDate := SqlStringToDate(DataSet['PayDate']);
  FPayType := DataSet['PayType'];
  FAmount := DataSet['Amount'];
  FDescription := DataSet['Description'];
  FCurrencyRate := DataSet['CurrencyRate'];
  FCurrency := DataSet['Currency'];
  FAyear := DataSet['Ayear'];
  FAmon := DataSet['Amon'];
  FAday := DataSet['Aday'];
  FID := DataSet['ID'];
  FconfirmDate := DataSet['confirmDate'];
  FNotes := DataSet['Notes'];
  Fstaff := DataSet['staff'];
  FdtCreated := DataSet['dtCreated'];
  FInvoiceIndex := DataSet['InvoiceIndex'];

  IsDirty := False;
end;

constructor TInvoicePayment.Create(Owner: TInvoice);
begin
  FReservation := Owner.Reservation;
  FRoomReservation := Owner.RoomReservation;
  FInvoiceNumber := Owner.InvoiceNumber;
  IsDirty := True;
end;

procedure TInvoicePayment.Insert;
var sql : String;
begin
  sql := 'INSERT INTO payments' +
         '(' +
         '  Reservation' +
         ', RoomReservation' +
         ', Person' +

         ', Customer' +
         ', AutoGen' +
         ', InvoiceNumber' +
         ', PayDate' +

         ', PayType' +
         ', Amount' +
         ', Description' +

         ', CurrencyRate' +
         ', Currency' +

         ', TypeIndex' +

         ', AYear' +
         ', AMon' +
         ', ADay' +
         ', staff' +
         ', InvoiceIndex' +

         ')' +
         'Values' +
         '(' +

         '  ' + inttostr(Reservation) +
         ', ' + inttostr(RoomReservation) +
         ', ' + inttostr(Owner.SplitNumber) +

         ', ' + _db(Owner.Customer) +
         ', ' + _db(CreateAGUID) +

         ', ' + _db(InvoiceNumber) +
         ', ' + _db(Now, True) +

         ', ' + _db(PayType) +
         ', ' + _CommaToDot(trim(floattostr(Amount))) +
         ', ' + _db(Description + ' [' + PayType + ']') +
         ', ' + _CommaToDot(floattostr(CurrencyRate)) +
         ', ' + _db(Currency) +
         ', ' + _db(ORD(TypeIndex)) +
         ', ' + _db(AYear) +
         ', ' + _db(AMon) +
         ', ' + _db(ADay) +
         ', ' + _db(d.roomerMainDataSet.username) +
         ', ' + _db(InvoiceIndex) +
         ')';

  d.roomerMainDataSet.DoCommand(sql);
end;

procedure TInvoicePayment.Update;
var sql : String;
begin
  sql := 'UPDATE payments' +
         '  SET Reservation = ' + _db(Reservation) +
         ', RoomReservation = ' + _db(RoomReservation) +
         ', Person = ' + _db(Person) +

         ', Customer = ' + _db(Owner.Customer) +
         ', AutoGen = ' + _db(AutoGen) +
         ', InvoiceNumber = ' + _db(InvoiceNumber) +
         ', PayDate = ' + _db(PayDate) +

         ', PayType = ' + _db(PayType) +
         ', Amount = ' + _db(Amount) +
         ', Description = ' + _db(Description) +

         ', CurrencyRate = ' + _db(CurrencyRate) +
         ', Currency = ' + _db(Currency) +

         ', TypeIndex = ' + _db(ORD(TypeIndex)) +

         ', AYear = ' + _db(AYear) +
         ', AMon = ' + _db(AMon) +
         ', ADay = ' + _db(ADay) +
         ', staff = ' + _db(staff) +
         ', InvoiceIndex = ' + _db(InvoiceIndex) +

         ' WHERE id = ' + _db(id);

  d.roomerMainDataSet.DoCommand(sql);
end;

procedure TInvoicePayment.Save;
begin
  if FId = 0 then
    Insert
  else
    Update;

  IsDirty := False;
end;

procedure TInvoicePayment.SetCurrencyRate(const Value: Double);
begin
  if FCurrencyRate = Value then exit;
  FCurrencyRate := Value;
  IsDirty := true;
end;

procedure TInvoicePayment.SetDirty(const Value: Boolean);
begin
  FDirty := Value;
end;

procedure TInvoicePayment.SetInvoiceIndex(const Value: Integer);
begin
  if FInvoiceIndex = Value then exit;
  FInvoiceIndex := Value;
  IsDirty := true;
end;

procedure TInvoicePayment.SetNotes(const Value: String);
begin
  if FNotes = Value then exit;
  FNotes := Value;
  IsDirty := true;
end;

{ TRoomRentPerDay }

constructor TRoomRentPerDay.Create(RecSet: TRoomerDataSet);
begin
  FReservation := RecSet['Reservation'];
  FRoomReservation := RecSet['RoomReservation'];
  FInvoiceNumber := RecSet['InvoiceNumber'];
  FRoom := RecSet['Room'];
  FPriceCode := RecSet['PriceCode'];
  FADate := RecSet['ADate'];
  FRoomRate := RecSet['RoomRate'];
  FDiscount := RecSet['Discount'];
  FIsPercentage := RecSet['IsPercentage'];
  FShowDiscount := RecSet['ShowDiscount'];
  FPaid := RecSet['Paid'];
end;



//**********************************************************************************************************
// NOTE on use of Currency in invoiceaddressees table
//
// Currency of the invoice per invoiceindex is historically stored in the invoiceaddressees table
// because invoicehead does not have a invoiceindex field
//
// TODO: Redesign invoicehead to contain header information PER INVOICEINDEX and include currency and rate and ....
//
//**********************************************************************************************************



end.
